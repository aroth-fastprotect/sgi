// kate: syntax C++;
// SGI - @SGI_COPYRIGHT_TEXT@ FAST Protect, Andreas Roth

#pragma once

#if defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MINGW32__) || defined( __BCPLUSPLUS__) || defined( __MWERKS__)
    #  if defined( SGI_LIBRARY )
    #    define SGI_EXPORT   __declspec(dllexport)
    #  else
    #    define SGI_EXPORT   __declspec(dllimport)
    #  endif
    #  if defined( SGI_REF_LIBRARY )
    #    define SGI_REF_EXPORT   __declspec(dllexport)
    #  else
    #    define SGI_REF_EXPORT   __declspec(dllimport)
    #  endif
    #  if defined( SGI_IMPL_LIBRARY )
    #    define SGI_IMPL_EXPORT   __declspec(dllexport)
    #  else
    #    define SGI_IMPL_EXPORT   __declspec(dllimport)
    #  endif
    #  if defined( SGI_OSG_HELPER_LIBRARY )
    #    define SGI_OSG_HELPER_EXPORT   __declspec(dllexport)
    #  else
    #    define SGI_OSG_HELPER_EXPORT   __declspec(dllimport)
    #  endif
    #  if defined( SGI_QT_HELPER_LIBRARY )
    #    define SGI_QT_HELPER_EXPORT    __declspec(dllexport)
    #  else
    #    define SGI_QT_HELPER_EXPORT    __declspec(dllimport)
    #  endif
#elif defined(__GNUC__)
    #  define SGI_EXPORT __attribute__ ((visibility ("default")))
    #  define SGI_REF_EXPORT __attribute__ ((visibility ("default")))
    #  define SGI_IMPL_EXPORT __attribute__ ((visibility ("default")))
    #  define SGI_OSG_HELPER_EXPORT __attribute__ ((visibility ("default")))
    #  define SGI_QT_HELPER_EXPORT __attribute__ ((visibility ("default")))
#else
    #  define SGI_EXPORT
    #  define SGI_REF_EXPORT
    #  define SGI_IMPL_EXPORT
    #  define SGI_OSG_HELPER_EXPORT
    #  define SGI_QT_HELPER_EXPORT
#endif
/**

\namespace sgi

The sgi library is a NodeKit that allows to inspect and modify a scene graph during runtime.
*/


#define SGI_VERSION_MAJOR    @SGI_VERSION_MAJOR@
#define SGI_VERSION_MINOR    @SGI_VERSION_MINOR@
#define SGI_VERSION_PATCH    @SGI_VERSION_PATCH@
#define SGI_VERSION_BUILD    @SGI_VERSION_BUILD@
#define SGI_SOVERSION        @SGI_SOVERSION@

#define SGI_VERSION_STR      "@SGI_VERSION@"
#define SGI_SOVERSION_STR    "@SGI_SOVERSION@"

#define SGI_LIBRARY_POSTFIX_DEBUG    "@SGI_LIBRARY_POSTFIX_DEBUG@"
#define SGI_LIBRARY_SHARED_MODULE_SUFFIX "@SGI_LIBRARY_SHARED_MODULE_SUFFIX@"

#ifdef _DEBUG
#define SGI_LIBRARY_NAME "@SGI_LIBRARY_NAME_DEBUG@"
#define SGI_LIBRARY_POSTFIX "@SGI_LIBRARY_POSTFIX_DEBUG@"
#else // _DEBUG
#  ifdef _MINSIZEREL
#    define SGI_LIBRARY_NAME "@SGI_LIBRARY_NAME_MINSIZEREL@"
#    define SGI_LIBRARY_POSTFIX "@SGI_LIBRARY_POSTFIX_MINSIZEREL@"
#  else // _MINSIZEREL
#    ifdef _RELWITHDEBINFO
#      define SGI_LIBRARY_NAME "@SGI_LIBRARY_NAME_RELWITHDEBINFO@"
#      define SGI_LIBRARY_POSTFIX "@SGI_LIBRARY_POSTFIX_RELWITHDEBINFO@"
#    else // _RELWITHDEBINFO
#      define SGI_LIBRARY_NAME "@SGI_LIBRARY_NAME_RELEASE@"
#      define SGI_LIBRARY_POSTFIX "@SGI_LIBRARY_POSTFIX_RELEASE@"
#    endif // _RELWITHDEBINFO
#  endif // _MINSIZEREL
#endif // _DEBUG

#cmakedefine01 SGI_HAS_GAMMARAY_SUPPORT
#cmakedefine01 SGI_HAS_FFMPEG_SUPPORT
#cmakedefine01 SGI_HAS_OSGQT_SUPPORT
#cmakedefine01 SGI_HAS_OSGEARTH_SUPPORT
#cmakedefine01 SGI_HAS_LOG4CPLUS_SUPPORT

extern "C" {
/**
  * sgiGetVersion() returns the library version number.
  * Numbering convention : SGI-@SGI_MINOR_VERSION@ will return @SGI_MINOR_VERSION@ from sgiGetVersion.
  *
*/
extern SGI_EXPORT const char* sgiGetVersion();

/** The sgiGetSOVersion() method returns the SGI shared object version number. */
extern SGI_EXPORT const char* sgiGetSOVersion();

/** The sgiGetLibraryName() method returns the library name in human-friendly form. */
extern SGI_EXPORT const char* sgiGetLibraryName();

/** The sgiGetLibraryModuleFilename() method returns the full path to the SGI library. */
extern SGI_EXPORT const char * sgiGetLibraryModuleFilename();
}
