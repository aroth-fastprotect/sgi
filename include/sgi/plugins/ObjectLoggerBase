// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include "SGIDataItemBase.h"
#include "ObjectLoggerDialog"

namespace sgi {

class ObjectLoggerBase : public IObjectLogger
{
public:
    ObjectLoggerBase(SGIPluginHostInterface * hostInterface, size_t maximum_log_items=10000)
        : IObjectLogger()
        , _hostInterface(hostInterface)
        , _maximum_log_items(maximum_log_items)
        , _items()
        , _fields()
        , _log()
        , _dialog()
    {
    }
    ObjectLoggerBase(const ObjectLoggerBase & rhs)
        : IObjectLogger(rhs)
        , _maximum_log_items(rhs._maximum_log_items)
        , _items(rhs._items)
        , _fields(rhs._fields)
        , _log(rhs._log)
        , _dialog(rhs._dialog)
    {
    }

    bool                addItem(SGIItemBase * item, bool alsoChilds) override
    {
        bool ret;
        ret = !isItemPresent(item);
        if(ret)
            _items.push_back(item);
        return ret;
    }
    virtual bool                addItems(const SGIItemBasePtrPath & path) override
    {
        bool ret = true;
        for(SGIItemBasePtrPath::const_iterator it = path.begin(); it != path.end(); it++)
        {
            if(!addItem((*it).get(), false))
                ret = false;
        }
        return ret;
    }
    virtual bool                removeItem(SGIItemBase * item) override
    {
        bool ret;
        SGIItemBasePtrVector::iterator it = std::find_if(_items.begin(), _items.end(), [&item] (const SGIItemBasePtr & rhs) { return rhs.get() == item; });
        ret = (it != _items.end());
        if(ret)
            _items.erase(it);
        return ret;
    }
    virtual bool                removeItems(const SGIItemBasePtrPath & path) override
    {
        bool ret = true;
        for(SGIItemBasePtrPath::const_iterator it = path.begin(); it != path.end(); it++)
        {
            if(!removeItem((*it).get()))
                ret = false;
        }
        return ret;
    }
    virtual bool                isItemPresent(SGIItemBase * item) const override
    {
        for(SGIItemBasePtrVector::const_iterator it = _items.begin(); it != _items.end(); it++)
            if((*it).get() == item)
                return true;
        return false;
    }
    virtual bool                getItems(SGIItemBasePtrVector & vector) override
    {
        vector = _items;
        return true;
    }
    virtual bool                getFields(SGIDataItemBasePtr & fields) override
    {
        fields = _fields;
        return fields.valid();
    }
    virtual bool                getLog(SGIDataItemBasePtrList & list) override
    {
        list = _log;
        return true;
    }
    virtual IObjectLoggerDialog * getDialog() override
    {
        return _dialog.get();
    }
    virtual bool                addLogItem(SGIDataItemBase * item) override
    {
        _log.push_back(item);
        if(_dialog.valid())
            _dialog->addLogItem(item);
        while(_log.size() > _maximum_log_items)
        {
            const SGIDataItemBasePtr & first = _log.front();
            if(_dialog.valid())
                _dialog->removeLogItem(first.get(), true);
            _log.pop_front();
        }
        return true;
    }

protected:
    SGIPluginHostInterface *    _hostInterface;
    size_t                      _maximum_log_items;
    SGIItemBasePtrVector        _items;
    SGIDataItemBasePtr          _fields;
    SGIDataItemBasePtrList      _log;
    IObjectLoggerDialogPtr      _dialog;
};

} // namespace sgi
