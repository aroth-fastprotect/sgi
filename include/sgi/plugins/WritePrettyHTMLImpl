// kate: mode C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once

#include <sgi/details/functionImplBase>

namespace sgi {

template<template<typename> class ImplT>
class writePrettyHTMLImplBaseT : public details::functionImplBase
{
public:
    struct TypePolicy {
        struct CallParamType
        {
            CallParamType(SGIPluginHostInterface * hostInterface_, const SGIItemBase * item_, std::basic_ostream<char>& os_, bool table_)
                : hostInterface(hostInterface_), item(item_), os(os_), table(table_) {}
            SGIPluginHostInterface * hostInterface;
            const SGIItemBase * item;
            std::ostream & os;
            bool table;
        };
        typedef bool ResultType;
    };

    writePrettyHTMLImplBaseT(SGIPluginHostInterface * hostInterface=nullptr, const SGIItemBase * item=nullptr, bool table=true)
        : functionImplBase(hostInterface, item), _table(table) {}

    typedef details::call_by_type_registryT<TypePolicy> Registry;
    template<typename T>
    class AutoRegisterTypeT : public details::call_by_type_auto_registerT<writePrettyHTMLImplBaseT, T>
    {
    };

    typedef typename TypePolicy::CallParamType CallParamType;
    typedef typename TypePolicy::ResultType ResultType;

    template<typename T>
    static bool callImpl(const details::TypeWrap<T> & t, const CallParamType & param, ResultType & result)
    {
        ImplT<T> f(param.hostInterface, param.item, param.table);
        result = f.process(param.os);
        return result;
    }

    static bool call(SGIPluginHostInterface * hostInterface, const SGIItemBase * item, std::basic_ostream<char>& os, bool table)
    {
        CallParamType param(hostInterface, item, os, table);
        ResultType result;
        return Registry::instance()->call(*item->typeInfo(), param, result);
    }

    bool callNextHandler(std::basic_ostream<char>& os)
    {
        bool ret = false;
        SGIItemBase * itemNext = _item->nextBase();
        if(itemNext)
        {
            bool table = (os.tellp() == (std::streamoff)0);
            ret = _hostInterface->writePrettyHTML(os, itemNext, table);
        }
        return ret;
    }

protected:
    bool    _table;
};

#define WRITE_PRETTY_HTML_IMPL_TEMPLATE() \
    template<typename T> \
    class writePrettyHTMLImpl { \
    public: \
        typedef sgi::details::constexpr_false accept; \
        writePrettyHTMLImpl(SGIPluginHostInterface * /*hostInterface*/=nullptr, const SGIItemBase * /*item*/=nullptr, bool /*table*/=true) {} \
        bool process(std::basic_ostream<char>& /*os*/) { return false; } \
    }; \
    typedef writePrettyHTMLImplBaseT<writePrettyHTMLImpl> writePrettyHTMLImplBase;

#define WRITE_PRETTY_HTML_IMPL_DECLARE(__type) \
    template<> \
    class writePrettyHTMLImpl<__type> : public writePrettyHTMLImplBase { \
    private: \
        typedef AutoRegisterTypeT<__type> AutoRegisterType; \
        static AutoRegisterType s_autoregister; \
    public: \
        typedef sgi::details::constexpr_true accept; \
        writePrettyHTMLImpl<__type>(SGIPluginHostInterface * hostInterface=nullptr, const SGIItemBase * item=nullptr, bool table=true) \
            : writePrettyHTMLImplBase(hostInterface, item, table) {} \
        bool process(std::basic_ostream<char>& os); \
    };

#define WRITE_PRETTY_HTML_IMPL_REGISTER(__type) \
    writePrettyHTMLImpl<__type>::AutoRegisterType writePrettyHTMLImpl<__type>::s_autoregister;

#define WRITE_PRETTY_HTML_IMPL_DECLARE_AND_REGISTER(__type) \
    WRITE_PRETTY_HTML_IMPL_DECLARE(__type) \
    WRITE_PRETTY_HTML_IMPL_REGISTER(__type)

} // namespace sgi
