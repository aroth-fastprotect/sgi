// kate: syntax C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once

#include "SettingsDialog"
#include <sgi/details/functionImplBase>
#include <QDialog>

namespace sgi {
namespace details {
    template<class DIALOG_CLASS>
    struct IgnoreSetObjectPolicy {
        IgnoreSetObjectPolicy(DIALOG_CLASS * /*dialog*/) {}
        void            setObject(SGIItemBase * /*item*/, ISettingsDialogInfo * /*info*/=nullptr) {}
        void            setObject(const SGIHostItemBase * /*item*/, ISettingsDialogInfo * /*info*/=nullptr) {}
    };
    template<class DIALOG_CLASS>
    struct PerformSetObjectPolicy {
        PerformSetObjectPolicy(DIALOG_CLASS * dialog) : _dialog(dialog) {}
        void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=nullptr) { _dialog->setObject(item, info); }
        void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=nullptr) { _dialog->setObject(item, info); }
        DIALOG_CLASS * _dialog;
    };
}

template<class DIALOG_CLASS=QDialog, template<typename> class SETOBJECTPOLICY=details::IgnoreSetObjectPolicy>
class SettingsDialogImplT : public ISettingsDialog, public details::functionImplBase
{
public:
    SettingsDialogImplT(DIALOG_CLASS * dialog, SGIPluginHostInterface * hostInterface, SGIItemBase * item=nullptr, ISettingsDialogInfo * info=nullptr)
        : _dialog(dialog), details::functionImplBase(hostInterface, item), _info(info), _setObject(dialog)
        {
            _dialog->setAttribute(Qt::WA_DeleteOnClose);
        }
    ~SettingsDialogImplT() override
        { }

    void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=nullptr) override
    {
        _item = item;
        if(info)
            _info = info;
        _setObject.setObject(item, info);
    }
    void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=nullptr) override
    {
        if(info)
            _info = info;
        _setObject.setObject(item, info);
    }
    void            show() override { _dialog->show(); }
    void            hide() override { _dialog->hide(); }
    bool            isVisible() override { return _dialog->isVisible(); }
    int             showModal() override { return _dialog->exec(); }

    QWidget * parent()
    {
        return _info->parent();
    }
    ISettingsDialogInfo * info()
    {
        return _info;
    }
    void triggerRepaint()
    {
        return _info->triggerRepaint();
    }
    SGIItemBase * getView()
    {
        return _info->getView();
    }

protected:
    DIALOG_CLASS * _dialog;
    ISettingsDialogInfoPtr _info;
    SETOBJECTPOLICY<DIALOG_CLASS> _setObject;
};

template<class DIALOG_CLASS=QDialog, template<typename> class SETOBJECTPOLICY=details::IgnoreSetObjectPolicy>
class SettingsQDialogImplT : public DIALOG_CLASS, public details::functionImplBase
{
    class Interface : public ISettingsDialog
    {
    private:
        SettingsQDialogImplT * _dialog;
    public:
        Interface(SettingsQDialogImplT * q) : _dialog(q) {}
        ~Interface() override {}
        void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=nullptr) override { _dialog->setObject(item, info); }
        void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=nullptr) override { _dialog->setObject(item, info); }
        void            show() override { _dialog->show(); }
        void            hide() override { _dialog->hide(); }
        bool            isVisible() override { return _dialog->isVisible(); }
        int             showModal() override {
            if(QDialog* dlg = qobject_cast<QDialog*>(_dialog))
                return dlg->exec();
            else {
                _dialog->show();
                return 0;
            }
        }
    };

public:
    SettingsQDialogImplT(QWidget * parent, SGIPluginHostInterface * hostInterface, SGIItemBase * item=nullptr, ISettingsDialogInfo * info=nullptr)
        : DIALOG_CLASS(parent), details::functionImplBase(hostInterface, item), _interface(new Interface(this)), _info(info), _setObject(this)
        {
            DIALOG_CLASS::setAttribute(Qt::WA_DeleteOnClose);
        }
    ~SettingsQDialogImplT() override
        { }

    ISettingsDialog *           dialogInterface() { return _interface.get(); }

    void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=nullptr)
    {
        _item = item;
        if(info)
            _info = info;
        _setObject.setObject(item, info);
    }
    void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=nullptr)
    {
        if(info)
            _info = info;
        _setObject.setObject(item, info);
    }

    QWidget * parent()
    {
        return _info->parent();
    }
    ISettingsDialogInfo * info()
    {
        return _info;
    }
    void triggerRepaint()
    {
        return _info->triggerRepaint();
    }
    SGIItemBase * getView()
    {
        return _info->getView();
    }

protected:
    ISettingsDialogPtr _interface;
    ISettingsDialogInfoPtr _info;
    SETOBJECTPOLICY<DIALOG_CLASS> _setObject;
};

typedef SettingsDialogImplT<QDialog, details::IgnoreSetObjectPolicy> SettingsDialogImpl;
typedef SettingsQDialogImplT<QDialog, details::IgnoreSetObjectPolicy> SettingsQDialogImpl;


} // namespace sgi
