// kate: syntax C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once
#include <sgi/details/Referenced>
#include <sgi/details/ref_ptr>
#include <type_traits>

class QWidget;

namespace sgi {

class SGIItemBase;
class SGIHostItemBase;
class IContextMenu;
class ISceneGraphDialog;
class IObjectLoggerDialog;
class IObjectLogger;
class IImagePreviewDialog;
class ReferencedPickerBase;

class IHostCallback : public details::Referenced
{
public:
    virtual IContextMenu *          contextMenu(QWidget * parent, const SGIItemBase * item) = 0;
    virtual IContextMenu *          contextMenu(QWidget * parent, const SGIHostItemBase * item) = 0;
    virtual ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, SGIItemBase * item) = 0;
    virtual ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, const SGIHostItemBase * item) = 0;
    virtual IObjectLoggerDialog *   showObjectLoggerDialog(QWidget *parent, IObjectLogger * logger) = 0;
    virtual IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, SGIItemBase * item) = 0;
    virtual IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, const SGIHostItemBase * item) = 0;
    virtual IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, SGIItemBase * item) = 0;
    virtual IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, const SGIHostItemBase * item) = 0;

    enum PickerType {
        PickerTypeDefault,
        PickerTypeLine,
        PickerTypePolytope
    };
    virtual ReferencedPickerBase *  createPicker(PickerType type, float x, float y) = 0;

    virtual void                    triggerRepaint() = 0;
    virtual SGIItemBase *           getView() = 0;
    virtual QWidget *               getFallbackParentWidget() = 0;
	virtual void					shutdown() = 0;
};
typedef details::ref_ptr<IHostCallback> IHostCallbackPtr;

class HostCallbackBase : public IHostCallback
{
public:
	HostCallbackBase(IHostCallback * original)
		: _original(original) {}
    virtual ~HostCallbackBase() {}

	IContextMenu *          contextMenu(QWidget * parent, const SGIItemBase * item) override
	{
		if(_original.valid())
			return _original->contextMenu(parent, item);
		else
            return nullptr;
	}
	IContextMenu *          contextMenu(QWidget * parent, const SGIHostItemBase * item) override
	{
		if (_original.valid())
			return _original->contextMenu(parent, item);
		else
            return nullptr;
	}
	ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, SGIItemBase * item) override
	{
		if (_original.valid())
			return _original->showSceneGraphDialog(parent, item);
		else
            return nullptr;
	}
	ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, const SGIHostItemBase * item) override
	{
		if (_original.valid())
			return _original->showSceneGraphDialog(parent, item);
		else
            return nullptr;
	}
	IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, SGIItemBase * item) override
	{
		if (_original.valid())
			return _original->showObjectLoggerDialog(parent, item);
		else
            return nullptr;
	}
	IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, const SGIHostItemBase * item) override
	{
		if (_original.valid())
			return _original->showObjectLoggerDialog(parent, item);
		else
            return nullptr;
	}
    IObjectLoggerDialog *   showObjectLoggerDialog(QWidget *parent, IObjectLogger * logger) override
    {
        if (_original.valid())
            return _original->showObjectLoggerDialog(parent, logger);
        else
            return nullptr;
    }
	IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, SGIItemBase * item) override
	{
		if (_original.valid())
			return _original->showImagePreviewDialog(parent, item);
		else
            return nullptr;
	}
	IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, const SGIHostItemBase * item) override
	{
		if (_original.valid())
			return _original->showImagePreviewDialog(parent, item);
		else
            return nullptr;
	}
	virtual ReferencedPickerBase *  createPicker(PickerType type, float x, float y) override
	{
		if (_original.valid())
			return _original->createPicker(type, x, y);
		else
            return nullptr;
	}
	void triggerRepaint() override
	{
		if (_original.valid())
			_original->triggerRepaint();
	}
	SGIItemBase * getView() override
	{
		if (_original.valid())
			return _original->getView();
		else
            return nullptr;
	}
    virtual QWidget * getFallbackParentWidget() override
    {
        if (_original.valid())
            return _original->getFallbackParentWidget();
        else
            return nullptr;
    }
	virtual void shutdown() override
	{
		if (_original.valid())
			_original->shutdown();
	}

protected:
	IHostCallbackPtr _original;
};

template<typename T>
class HostCallbackFilterT : public IHostCallback
{
public:
    HostCallbackFilterT(IHostCallback * original, T * impl)
        : _original(original), _impl(impl) {}

    IContextMenu *          contextMenu(QWidget * parent, const SGIItemBase * item) override
    {
        if(std::is_same<T, IContextMenu>::value)
            return reinterpret_cast<IContextMenu*>(_impl);
        else if(_original.valid())
            return _original->contextMenu(parent, item);
		else
            return nullptr;
	}
    IContextMenu *          contextMenu(QWidget * parent, const SGIHostItemBase * item) override
    {
        if(std::is_same<T, IContextMenu>::value)
            return reinterpret_cast<IContextMenu*>(_impl);
		else if (_original.valid())
			return _original->contextMenu(parent, item);
		else
            return nullptr;
	}
    ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, SGIItemBase * item) override
    {
        if(std::is_same<T, ISceneGraphDialog>::value)
            return reinterpret_cast<ISceneGraphDialog*>(_impl);
		else if (_original.valid())
			return _original->showSceneGraphDialog(parent, item);
		else
            return nullptr;
	}
    ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, const SGIHostItemBase * item) override
    {
        if(std::is_same<T, ISceneGraphDialog>::value)
            return reinterpret_cast<ISceneGraphDialog*>(_impl);
		else if (_original.valid())
			return _original->showSceneGraphDialog(parent, item);
		else
            return nullptr;
	}
    IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, SGIItemBase * item) override
    {
        if(std::is_same<T, IObjectLoggerDialog>::value)
            return reinterpret_cast<IObjectLoggerDialog*>(_impl);
		else if (_original.valid())
			return _original->showObjectLoggerDialog(parent, item);
		else
            return nullptr;
	}
    IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, const SGIHostItemBase * item) override
    {
        if(std::is_same<T, IObjectLoggerDialog>::value)
            return reinterpret_cast<IObjectLoggerDialog*>(_impl);
		else if (_original.valid())
			return _original->showObjectLoggerDialog(parent, item);
		else
            return nullptr;
	}
	IObjectLoggerDialog *   showObjectLoggerDialog(QWidget *parent, IObjectLogger * logger) override
	{
        if(std::is_same<T, IObjectLoggerDialog>::value)
            return reinterpret_cast<IObjectLoggerDialog*>(_impl);
        else if (_original.valid())
            return _original->showObjectLoggerDialog(parent, logger);
        else
            return nullptr;
    }
    IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, SGIItemBase * item) override
    {
        if(std::is_same<T, IImagePreviewDialog>::value)
            return reinterpret_cast<IImagePreviewDialog*>(_impl);
		else if (_original.valid())
			return _original->showImagePreviewDialog(parent, item);
		else
            return nullptr;
	}
    IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, const SGIHostItemBase * item) override
    {
        if(std::is_same<T, IImagePreviewDialog>::value)
            return reinterpret_cast<IImagePreviewDialog*>(_impl);
		else if (_original.valid())
			return _original->showImagePreviewDialog(parent, item);
		else
            return nullptr;
	}
    virtual ReferencedPickerBase *  createPicker(PickerType type, float x, float y) override
    {
		if (_original.valid())
			return _original->createPicker(type, x, y);
		else
            return nullptr;
	}
    void triggerRepaint() override
    {
		if (_original.valid())
			_original->triggerRepaint();
    }
    SGIItemBase * getView() override
    {
		if (_original.valid())
			return _original->getView();
		else
            return nullptr;
    }
    virtual QWidget * getFallbackParentWidget() override
    {
        if (_original.valid())
            return _original->getFallbackParentWidget();
        else
            return nullptr;
    }
	virtual void shutdown() override
	{
		if (_original.valid())
			_original->shutdown();
	}

private:
    IHostCallbackPtr _original;
    T * _impl;
};

template<typename AUTOLOADCLASS>
inline IHostCallback * defaultHostCallback()
{
	IHostCallback * ret;
	typedef IHostCallback * (*pfn)();
    pfn func = reinterpret_cast<pfn>(AUTOLOADCLASS::sgiLibraryProcAddress("sgi_defaultHostCallback"));
	if (func)
		ret = func();
	else
        ret = nullptr;
	return ret;
}

template<typename AUTOLOADCLASS>
inline bool setHostCallback(IHostCallback * callback)
{
	bool ret = false;
	typedef void (*pfn)(IHostCallback * callback);
    pfn func = reinterpret_cast<pfn>(AUTOLOADCLASS::sgiLibraryProcAddress("sgi_setHostCallback"));
	if (func)
	{
		func(callback);
		ret = true;
	}
	return ret;
}

template<typename AUTOLOADCLASS>
inline bool getHostCallback(IHostCallbackPtr & callback)
{
    bool ret = false;
    typedef IHostCallback * (*pfn)();
    pfn func = reinterpret_cast<pfn>(AUTOLOADCLASS::sgiLibraryProcAddress("sgi_hostCallback"));
    if (func)
    {
        callback = func();
        ret = true;
    }
    return ret;
}

} // namespace sgi
