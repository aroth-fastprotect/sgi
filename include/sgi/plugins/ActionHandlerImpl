// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include "ContextMenu"
#include <sgi/details/functionImplBase>

namespace sgi {

template<template<unsigned> class ImplT>
class actionHandlerImplBaseT : public details::functionImplBase
{
public:
    struct TypePolicy {
        struct CallParamType
        {
            CallParamType(SGIPluginHostInterface * hostInterface_, SGIItemBase * item_, IContextMenuAction * menuAction_)
                : hostInterface(hostInterface_), item(item_), menuAction(menuAction_) {}
            SGIPluginHostInterface * hostInterface;
            SGIItemBase * item;
            IContextMenuAction * menuAction;
        };
        typedef bool ResultType;
    };

    actionHandlerImplBaseT(SGIPluginHostInterface * hostInterface=nullptr, SGIItemBase * item=nullptr, IContextMenuAction * menuAction=nullptr)
        : functionImplBase(hostInterface, item)
        , _menuAction(menuAction)
        {}

    typedef details::call_by_id_registryT<TypePolicy> Registry;
    template<unsigned Id>
    class AutoRegisterTypeT : public details::call_by_id_auto_registerT<actionHandlerImplBaseT, Id>
    {
    };

    typedef typename TypePolicy::CallParamType CallParamType;
    typedef typename TypePolicy::ResultType ResultType;

    template<unsigned Id>
    static bool callImpl(const details::UintWrap<Id> & /*id*/, const CallParamType & param, ResultType & result)
    {
        ImplT<Id> f(param.hostInterface, param.item, param.menuAction);
        result = f.execute();
        return result;
    }

    static bool call(SGIPluginHostInterface * hostInterface, SGIItemBase * item, IContextMenuAction * menuAction)
    {
        CallParamType param(hostInterface, item, menuAction);
        bool result;
        if(!Registry::instance()->call(menuAction->actionId(), param, result))
            return false;
        else
            return result;
    }
    bool callNextHandler(IContextMenuAction * menuAction)
    {
        bool ret = false;
        SGIItemBase * itemNext = _item->nextBase();
        if(itemNext)
            ret = _hostInterface->contextMenuExecute(menuAction, itemNext);
        return ret;
    }
    IContextMenuAction * menuAction()
    {
        return _menuAction.get();
    }
    IContextMenu * menu()
    {
        return _menuAction->menu();
    }
    void triggerRepaint()
    {
        IHostCallback * cb = hostCallback();
        if(cb)
            cb->triggerRepaint();
    }
    template<typename ACTION_ID_TYPE>
    ACTION_ID_TYPE actionId() const
    {
        return static_cast<ACTION_ID_TYPE>(_menuAction->actionId());
    }

    template<typename USER_DATA_TYPE>
    USER_DATA_TYPE * userData()
    {
        return dynamic_cast<USER_DATA_TYPE *>(_menuAction->userData());
    }
    template<typename USER_DATA_TYPE>
    const USER_DATA_TYPE * userData() const
    {
        return dynamic_cast<const USER_DATA_TYPE *>(_menuAction->userData());
    }
    template<typename USER_DATA_TYPE>
    USER_DATA_TYPE * modeUserData()
    {
        return dynamic_cast<USER_DATA_TYPE *>(_menuAction->modeUserData());
    }
    template<typename USER_DATA_TYPE>
    const USER_DATA_TYPE * modeUserData() const
    {
        return dynamic_cast<const USER_DATA_TYPE *>(_menuAction->modeUserData());
    }

protected:
    IContextMenuActionPtr _menuAction;
};

#define ACTION_HANDLER_IMPL_TEMPLATE() \
    template<unsigned T> \
    class actionHandlerImpl { \
    public: \
        typedef sgi::details::constexpr_false accept; \
        actionHandlerImpl(SGIPluginHostInterface * /*hostInterface*/=nullptr, SGIItemBase * /*item*/=nullptr, IContextMenuAction * /*menuAction*/=nullptr) {}\
        bool execute() { return false; } \
    }; \
    typedef actionHandlerImplBaseT<actionHandlerImpl> actionHandlerImplBase;


#define ACTION_HANDLER_IMPL_DECLARE(__id) \
    template<> \
    class actionHandlerImpl<__id> : public actionHandlerImplBase { \
    private: \
        typedef AutoRegisterTypeT<__id> AutoRegisterType; \
        static AutoRegisterType s_autoregister; \
    public: \
        typedef sgi::details::constexpr_true accept; \
        actionHandlerImpl<__id>(SGIPluginHostInterface * hostInterface=nullptr, SGIItemBase * item=nullptr, IContextMenuAction * menuAction=nullptr) \
            : actionHandlerImplBase(hostInterface, item, menuAction) {} \
        bool execute(); \
    };

#define ACTION_HANDLER_IMPL_REGISTER(__id) \
    actionHandlerImpl<__id>::AutoRegisterType actionHandlerImpl<__id>::s_autoregister;

#define ACTION_HANDLER_IMPL_DECLARE_AND_REGISTER(__id) \
    ACTION_HANDLER_IMPL_DECLARE(__id) \
    ACTION_HANDLER_IMPL_REGISTER(__id)

} // namespace sgi
