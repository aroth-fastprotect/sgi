// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include "ObjectTree"
#include <sgi/details/functionImplBase>

class QTreeWidget;
class QTreeWidgetItem;

namespace sgi {

class SGIItemBase;
class SGIPluginHostInterface;
class IHostCallback;

template<template<typename> class ImplT>
class objectTreeBuildImplBaseT : public details::functionImplBase
{
public:
    struct TypePolicy {
        struct CallParamType
        {
            CallParamType(SGIPluginHostInterface * hostInterface_, SGIItemBase * item_, IObjectTreeItem * treeItem_)
                : hostInterface(hostInterface_), item(item_), treeItem(treeItem_) {}
            SGIPluginHostInterface * hostInterface;
            SGIItemBase * item;
            IObjectTreeItem * treeItem;
        };
        typedef bool ResultType;
    };

    objectTreeBuildImplBaseT(SGIPluginHostInterface * hostInterface=nullptr, SGIItemBase * item=nullptr)
        : functionImplBase(hostInterface, item) {}

    typedef details::call_by_type_registryT<TypePolicy> Registry;
    template<typename T>
    class AutoRegisterTypeT : public details::call_by_type_auto_registerT<objectTreeBuildImplBaseT, T>
    {
    };

    typedef typename TypePolicy::CallParamType CallParamType;
    typedef typename TypePolicy::ResultType ResultType;

    template<typename T>
    static bool callImpl(const details::TypeWrap<T> & t, const CallParamType & param, ResultType & result)
    {
        ImplT<T> f(param.hostInterface, param.item);
        result = f.build(param.treeItem);
        return result;
    }

    static bool call(SGIPluginHostInterface * hostInterface, SGIItemBase * item, IObjectTreeItem * treeItem)
    {
        CallParamType param(hostInterface, item, treeItem);
        bool result;
        if(!Registry::instance()->call(*item->typeInfo(), param, result))
            return false;
        else
            return result;
    }

    bool callNextHandler(IObjectTreeItem * treeItem)
    {
        bool ret = false;
        SGIItemBase * itemNext = _item->nextBase();
        if(itemNext)
            ret = _hostInterface->objectTreeBuildTree(treeItem, itemNext);
        return ret;
    }
};

#define OBJECT_TREE_BUILD_IMPL_TEMPLATE() \
    template<typename T> \
    class objectTreeBuildImpl { \
    public: \
        typedef sgi::details::constexpr_false accept; \
        objectTreeBuildImpl(SGIPluginHostInterface * /*hostInterface*/=nullptr, SGIItemBase * /*item*/=nullptr) {} \
        bool build(IObjectTreeItem * /*treeItem*/) { return false; } \
    }; \
    typedef objectTreeBuildImplBaseT<objectTreeBuildImpl> objectTreeBuildImplBase;

#define OBJECT_TREE_BUILD_IMPL_DECLARE(__type) \
    template<> \
    class objectTreeBuildImpl<__type> : public objectTreeBuildImplBase { \
    private: \
        typedef AutoRegisterTypeT<__type> AutoRegisterType; \
        static AutoRegisterType s_autoregister; \
    public: \
        typedef sgi::details::constexpr_true accept; \
        objectTreeBuildImpl<__type>(SGIPluginHostInterface * hostInterface=nullptr, SGIItemBase * item=nullptr) \
            : objectTreeBuildImplBase(hostInterface, item) {} \
        bool build(IObjectTreeItem * treeItem); \
    };

#define OBJECT_TREE_BUILD_IMPL_REGISTER(__type) \
    objectTreeBuildImpl<__type>::AutoRegisterType objectTreeBuildImpl<__type>::s_autoregister;

#define OBJECT_TREE_BUILD_IMPL_DECLARE_AND_REGISTER(__type) \
    OBJECT_TREE_BUILD_IMPL_DECLARE(__type) \
    OBJECT_TREE_BUILD_IMPL_REGISTER(__type)

template<template<typename> class ImplT>
class objectTreeBuildRootImplBaseT : public details::functionImplBase
{
public:
    struct TypePolicy {
        struct CallParamType
        {
            CallParamType(SGIPluginHostInterface * hostInterface_, SGIItemBase * item_, IObjectTreeItem * treeItem_)
                : hostInterface(hostInterface_), item(item_), treeItem(treeItem_) {}
            SGIPluginHostInterface * hostInterface;
            SGIItemBase * item;
            IObjectTreeItem * treeItem;
        };
        typedef bool ResultType;
    };

    objectTreeBuildRootImplBaseT(SGIPluginHostInterface * hostInterface=nullptr, SGIItemBase * item=nullptr)
        : functionImplBase(hostInterface, item) {}

    typedef details::call_by_type_registryT<TypePolicy> Registry;
    template<typename T>
    class AutoRegisterTypeT : public details::call_by_type_auto_registerT<objectTreeBuildRootImplBaseT, T>
    {
    };

    typedef typename TypePolicy::CallParamType CallParamType;
    typedef typename TypePolicy::ResultType ResultType;

    template<typename T>
    static bool callImpl(const details::TypeWrap<T> & t, const CallParamType & param, ResultType & result)
    {
        ImplT<T> f(param.hostInterface, param.item);
        result = f.build(param.treeItem);
        return result;
    }

    static bool call(SGIPluginHostInterface * hostInterface, SGIItemBase * item, IObjectTreeItem * treeItem)
    {
        CallParamType param(hostInterface, item, treeItem);
        bool result;
        if(!Registry::instance()->call(*item->typeInfo(), param, result))
            return false;
        else
            return result;
    }
};

#define OBJECT_TREE_BUILD_ROOT_IMPL_TEMPLATE() \
    template<typename T> \
    class objectTreeBuildRootImpl { \
    public: \
        typedef sgi::details::constexpr_false accept; \
        objectTreeBuildRootImpl(SGIPluginHostInterface * /*hostInterface*/=nullptr, SGIItemBase * /*item*/=nullptr) {} \
        bool build(IObjectTreeItem * /*treeItem*/) { return false; } \
    }; \
    typedef objectTreeBuildRootImplBaseT<objectTreeBuildRootImpl> objectTreeBuildRootImplBase;

#define OBJECT_TREE_BUILD_ROOT_IMPL_DECLARE(__type) \
    template<> \
    class objectTreeBuildRootImpl<__type> : public objectTreeBuildRootImplBase { \
    private: \
        typedef AutoRegisterTypeT<__type> AutoRegisterType; \
        static AutoRegisterType s_autoregister; \
    public: \
        typedef sgi::details::constexpr_true accept; \
        objectTreeBuildRootImpl<__type>(SGIPluginHostInterface * hostInterface=nullptr, SGIItemBase * item=nullptr) \
            : objectTreeBuildRootImplBase(hostInterface, item) {} \
        bool build(IObjectTreeItem * treeItem); \
    };

#define OBJECT_TREE_BUILD_ROOT_IMPL_REGISTER(__type) \
    objectTreeBuildRootImpl<__type>::AutoRegisterType objectTreeBuildRootImpl<__type>::s_autoregister;

#define OBJECT_TREE_BUILD_ROOT_IMPL_DECLARE_AND_REGISTER(__type) \
    OBJECT_TREE_BUILD_ROOT_IMPL_DECLARE(__type) \
    OBJECT_TREE_BUILD_ROOT_IMPL_REGISTER(__type)

class SGI_QT_HELPER_EXPORT ObjectTreeItem : public IObjectTreeItem
{
public:
    static SGIPluginHostInterface * s_hostInterface;

    ObjectTreeItem (QTreeWidget * widget, IObjectTreeImpl * impl, SGIPluginHostInterface * hostInterface);
    ObjectTreeItem (QTreeWidgetItem * item, SGIPluginHostInterface * hostInterface);
    ObjectTreeItem(const ObjectTreeItem & item);
    virtual ~ObjectTreeItem();

    IObjectTreeItem * root() override;
    IObjectTreeItem * parent() override;

    void clear()  override;
    IObjectTreeItem * addChild(const std::string & name, SGIItemBase * item) override;
    IObjectTreeItem * addChild(const std::string & name, const SGIHostItemBase * hostitem) override;

    IObjectTreeItem * findChild(const std::string & name) override;

    IObjectTreeItem * addChildIfNotExists(const std::string & name, SGIItemBase * item) override;
    IObjectTreeItem * addChildIfNotExists(const std::string & name, const SGIHostItemBase * hostitem) override;

    IObjectTreeItem * insertChild(IObjectTreeItem * sibling, const std::string & name, SGIItemBase * item) override;
    IObjectTreeItem * insertChild(IObjectTreeItem * sibling, const std::string & name, const SGIHostItemBase * item) override;


    void setSelected(bool select) override;
    bool isSelected() const override;

    SGIItemBase * item() override;
    void expand() override;
    void collapse() override;

    QTreeWidgetItem * treeItem();
    const QTreeWidgetItem * treeItem() const;

    void children(IObjectTreeItemPtrList & children) override;

    void reload() override;

    IObjectTreeItem * selectedItem() override;

    void setName(const std::string & name) override;
    void updateName() override;

protected:
    IObjectTreeItem * addChildImpl(const std::string & name, SGIItemBase * item);
    IObjectTreeItem * insertChildImpl(int index, const std::string & name, SGIItemBase * item);
    static void addDummyChild(QTreeWidgetItem * itemParent);

private:
    SGIPluginHostInterface * _hostInterface;
    QTreeWidgetItem * _item;
};

typedef details::ref_ptr<IObjectTreeItem> IObjectTreeItemPtr;

} // namespace sgi
