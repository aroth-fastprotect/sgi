// kate: syntax C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once

#include "HostCallback"

class QWidget;
class QDialog;

namespace sgi {

class SGIHostItemBase;
class SGIItemBase;
typedef details::ref_ptr<SGIItemBase> SGIItemBasePtr;
class SGIPluginHostInterface;

class ISettingsDialogInfo : public IHostCallback
{
public:
    virtual unsigned dialogId() = 0;
    virtual QWidget * parent() = 0;
};
typedef details::ref_ptr<ISettingsDialogInfo> ISettingsDialogInfoPtr;

class SettingsDialogInfoBase : public ISettingsDialogInfo
{
public:
    SettingsDialogInfoBase(unsigned dialogId, QWidget * parent, IHostCallback * callback)
        : _dialogId(dialogId), _parent(parent), _hostCallback(callback) {}

    unsigned dialogId() override { return _dialogId; }
    QWidget * parent() override { return _parent; }
    IContextMenu *          contextMenu(QWidget * parent, const SGIItemBase * item) override
    {
        return _hostCallback->contextMenu(parent, item);
    }
    IContextMenu *          contextMenu(QWidget * parent, const SGIHostItemBase * item) override
    {
        return _hostCallback->contextMenu(parent, item);
    }
    ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, SGIItemBase * item) override
    {
        return _hostCallback->showSceneGraphDialog(parent, item);
    }
    ISceneGraphDialog *     showSceneGraphDialog(QWidget * parent, const SGIHostItemBase * item) override
    {
        return _hostCallback->showSceneGraphDialog(parent, item);
    }
    IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, SGIItemBase * item) override
    {
        return _hostCallback->showObjectLoggerDialog(parent, item);
    }
    IObjectLoggerDialog *   showObjectLoggerDialog(QWidget * parent, const SGIHostItemBase * item) override
    {
        return _hostCallback->showObjectLoggerDialog(parent, item);
    }
    IObjectLoggerDialog *   showObjectLoggerDialog(QWidget *parent, IObjectLogger * logger) override
    {
        return _hostCallback->showObjectLoggerDialog(parent, logger);
    }
    IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, SGIItemBase * item) override
    {
        return _hostCallback->showImagePreviewDialog(parent, item);
    }
    IImagePreviewDialog *   showImagePreviewDialog(QWidget * parent, const SGIHostItemBase * item) override
    {
        return _hostCallback->showImagePreviewDialog(parent, item);
    }
    bool openSettingsDialog(ISettingsDialogPtr & dialog, const SGIHostItemBase * item, ISettingsDialogInfo * info) override
    {
        return _hostCallback->openSettingsDialog(dialog, item, info);
    }
    bool openSettingsDialog(ISettingsDialogPtr & dialog, SGIItemBase * item, ISettingsDialogInfo * info) override
    {
        return _hostCallback->openSettingsDialog(dialog, item, info);
    }

    ReferencedPickerBase *  createPicker(PickerType type, float x, float y) override
    {
        return _hostCallback->createPicker(type, x, y);
    }
    void triggerRepaint() override
    {
        return _hostCallback->triggerRepaint();
    }
    SGIItemBase * getView() override
    {
        return _hostCallback->getView();
    }
    QWidget * getFallbackParentWidget() override
    {
        return _parent;
    }
    void shutdown() override
	{
		_hostCallback->shutdown();
	}

protected:
    // hide it to force allocation on heap (using ref_ptr)
    virtual ~SettingsDialogInfoBase() {}

private:
    unsigned _dialogId;
    QWidget * _parent;
    IHostCallbackPtr _hostCallback;
};

class ISettingsDialog : public details::Referenced
{
public:
    virtual void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=nullptr) = 0;
    virtual void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=nullptr) = 0;
    virtual void            show() = 0;
    virtual void            hide() = 0;
    virtual bool            isVisible() = 0;
    virtual int             showModal() = 0;
};

typedef details::ref_ptr<ISettingsDialog> ISettingsDialogPtr;

} // namespace sgi
