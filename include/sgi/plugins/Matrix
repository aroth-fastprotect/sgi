// kate: syntax C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once
#include <sgi/Export>

namespace sgi {

class Quat;

class SGI_IMPL_EXPORT Matrix {

public:
    typedef double value_type;
    value_type _mat[4][4];

    inline Matrix() { makeIdentity(); }
    inline Matrix(const Matrix& mat) { set(mat.ptr()); }
    inline explicit Matrix(float const * const ptr) { set(ptr); }
    inline explicit Matrix(double const * const ptr) { set(ptr); }
    inline explicit Matrix(const Quat& quat) { makeRotate(quat); }

    Matrix(value_type a00, value_type a01, value_type a02, value_type a03,
        value_type a10, value_type a11, value_type a12, value_type a13,
        value_type a20, value_type a21, value_type a22, value_type a23,
        value_type a30, value_type a31, value_type a32, value_type a33);

    inline Matrix& operator = (const Matrix& rhs)
    {
        if (&rhs == this) return *this;
        set(rhs.ptr());
        return *this;
    }

    inline bool valid() const { return !isNaN(); }
    bool isNaN() const;

    inline void set(const Matrix& rhs) { set(rhs.ptr()); }

    inline void set(float const * const ptr)
    {
        value_type* local_ptr = (value_type*)_mat;
        for (int i = 0; i<16; ++i) local_ptr[i] = (value_type)ptr[i];
    }

    inline void set(double const * const ptr)
    {
        value_type* local_ptr = (value_type*)_mat;
        for (int i = 0; i<16; ++i) local_ptr[i] = (value_type)ptr[i];
    }

    inline value_type& operator()(int row, int col) { return _mat[row][col]; }
    inline value_type operator()(int row, int col) const { return _mat[row][col]; }

    void set(value_type a00, value_type a01, value_type a02, value_type a03,
        value_type a10, value_type a11, value_type a12, value_type a13,
        value_type a20, value_type a21, value_type a22, value_type a23,
        value_type a30, value_type a31, value_type a32, value_type a33);

    value_type * ptr() { return (value_type*)_mat; }
    const value_type * ptr() const { return (const value_type *)_mat; }

    bool isIdentity() const
    {
        return _mat[0][0] == 1.0 && _mat[0][1] == 0.0 && _mat[0][2] == 0.0 &&  _mat[0][3] == 0.0 &&
            _mat[1][0] == 0.0 && _mat[1][1] == 1.0 && _mat[1][2] == 0.0 &&  _mat[1][3] == 0.0 &&
            _mat[2][0] == 0.0 && _mat[2][1] == 0.0 && _mat[2][2] == 1.0 &&  _mat[2][3] == 0.0 &&
            _mat[3][0] == 0.0 && _mat[3][1] == 0.0 && _mat[3][2] == 0.0 &&  _mat[3][3] == 1.0;
    }

    void makeIdentity();
    void makeRotate(const Quat&);

    void setRotate(const Quat& q);
};

enum MatrixUsage {
    MatrixUsageUnknown = 0,
    MatrixUsageModel,
    MatrixUsageView,
    MatrixUsageProjectionPerspective,
    MatrixUsageProjectionOrtho,
    MatrixUsageProjectionOrtho2D,
    MatrixUsageProjectionFrustum,
    MatrixUsageProjection = MatrixUsageProjectionPerspective,
};

} // namespace sgi
