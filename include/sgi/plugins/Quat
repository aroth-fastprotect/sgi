// kate: syntax C++11;
// SGI - Copyright (C) 2012-2017 FAST Protect, Andreas Roth

#pragma once
#include <sgi/Export>

namespace sgi {

class SGI_IMPL_EXPORT Quat {
public:
    typedef double value_type;

    value_type  _v[4];    // a four-vector

    inline Quat() { _v[0]=0.0; _v[1]=0.0; _v[2]=0.0; _v[3]=1.0; }

    inline Quat( value_type x, value_type y, value_type z, value_type w )
    {
        _v[0]=x;
        _v[1]=y;
        _v[2]=z;
        _v[3]=w;
    }

    inline bool valid() const { return !isNaN(); }
    bool isNaN() const;

    inline value_type & operator [] (int i) { return _v[i]; }
    inline value_type   operator [] (int i) const { return _v[i]; }

    inline value_type & x() { return _v[0]; }
    inline value_type & y() { return _v[1]; }
    inline value_type & z() { return _v[2]; }
    inline value_type & w() { return _v[3]; }

    inline value_type x() const { return _v[0]; }
    inline value_type y() const { return _v[1]; }
    inline value_type z() const { return _v[2]; }
    inline value_type w() const { return _v[3]; }

    /** return true if the Quat represents a zero rotation, and therefore can be ignored in computations.*/
    bool zeroRotation() const { return _v[0]==0.0 && _v[1]==0.0 && _v[2]==0.0 && _v[3]==1.0; }

    /// Length of the quaternion = sqrt( vec . vec )
    value_type length() const;

    /// Length of the quaternion = vec . vec
    value_type length2() const
    {
        return _v[0]*_v[0] + _v[1]*_v[1] + _v[2]*_v[2] + _v[3]*_v[3];
    }

    void set(const value_type & x, const value_type & y, const value_type & z, const value_type & w)
    {
        _v[0] = x; _v[1] = y; _v[2] = z; _v[3] = w;
    }
};

} // namespace sgi
