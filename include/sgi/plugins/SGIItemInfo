// kate: syntax C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once

namespace sgi {

typedef details::ReferencedDataT<int> ReferencedDataInt;
typedef std::pair<int, int> IntPair;
typedef details::ReferencedDataT<IntPair> ReferencedDataIntPair;
typedef details::ReferencedDataT<std::string> ReferencedDataString;

namespace details {
    template<typename TYPE>
    struct copy_object {
        static TYPE * execute(TYPE * obj)
        {
            return new TYPE(*obj);
        }
    };
    template<>
    struct copy_object<void> {
        static void * execute(void * obj)
        {
            return nullptr;
        }
    };
    template<typename TYPE>
    struct assign_object {
        static TYPE * execute(TYPE * obj)
        {
            return obj;
        }
    };

    template<typename TYPE>
    struct delete_operator {
        static void execute(TYPE * obj)
        {
            delete obj;
        }
    };
    template<typename TYPE>
    struct do_not_delete {
        static void execute(TYPE *)
        {
        }
    };
}

template<typename OBJECT_TYPE, 
            typename OBJECT_STORAGE_TYPE=OBJECT_TYPE*, 
            template<typename> class OBJECT_COPY=details::copy_object,
            template<typename> class OBJECT_DELETER=details::delete_operator,
            template<typename> class OBJECT_ASSIGN = details::assign_object
    >
struct SGIItemInfoPlainPtr {
    typedef OBJECT_TYPE ObjectType;
    typedef OBJECT_STORAGE_TYPE ObjectStorageType;

    static ObjectType * objectPtr(const ObjectStorageType & item)
    {
        return static_cast<ObjectType *>(item);
    }
    static ObjectType * assignObject(ObjectType * rhs)
    {
        return OBJECT_ASSIGN<ObjectType>::execute(rhs);
    }
    static ObjectType * copyObject(const ObjectType & rhs)
    {
        return OBJECT_COPY<ObjectType>::execute(rhs);
    }
    static void deleteObject(const ObjectStorageType & item)
    {
        OBJECT_DELETER<ObjectType>::execute(static_cast<ObjectType *>(item));
    }
};

template<typename OBJECT_TYPE, typename OBJECT_STORAGE_TYPE=OBJECT_TYPE*>
struct SGIItemInfoSharedPtr {
    typedef OBJECT_TYPE ObjectType;
    typedef OBJECT_STORAGE_TYPE ObjectStorageType;

    static ObjectType * objectPtr(const ObjectStorageType & item)
    {
        return static_cast<ObjectType *>(item.get());
    }
    static ObjectType * assignObject(ObjectType * rhs)
    {
        return rhs;
    }
    static ObjectType * copyObject(const ObjectType & rhs)
    {
        return new ObjectType(rhs);
    }
    static void deleteObject(const ObjectStorageType & /*item*/)
    {
    }
};

template<typename OBJECT_TYPE, typename OBJECT_STORAGE_TYPE=OBJECT_TYPE*>
struct SGIItemInfoSharedPtrQt {
    typedef OBJECT_TYPE ObjectType;
    typedef OBJECT_STORAGE_TYPE ObjectStorageType;

    static ObjectType * objectPtr(const ObjectStorageType & item)
    {
        return static_cast<ObjectType *>(item.data());
    }
    static ObjectType * assignObject(ObjectType * rhs)
    {
        return rhs;
    }
    static ObjectType * copyObject(const ObjectType & rhs)
    {
        return new ObjectType(rhs);
    }
    static void deleteObject(const ObjectStorageType & /*item*/)
    {
    }
};

} // namespace sgi
