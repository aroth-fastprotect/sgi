// kate: mode C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once
#include "Referenced"
#include "ref_ptr"
#include <string>

namespace sgi {
namespace details {

class UserDataContainer;

/** META_Object macro define the standard clone, isSameKindAs and className methods.
  * Use when subclassing from Object to make it more convenient to define
  * the standard pure virtual clone, isSameKindAs and className methods
  * which are required for all Object subclasses.*/
#define SGI_Object(library,name) \
        virtual Object* cloneType() const { return new name (); } \
        virtual Object* clone() const { return new name (*this); } \
        virtual bool isSameKindAs(const Object* obj) const { return dynamic_cast<const name *>(obj)!=nullptr; } \
        virtual const char* libraryName() const { return #library; }\
        virtual const char* className() const { return #name; }

class Object : public Referenced
{
public:


    /** Construct an object. Note Object is a pure virtual base class
        and therefore cannot be constructed on its own, only derived
        classes which override the clone and className methods are
        concrete classes and can be constructed.*/
    inline Object():Referenced(), _userDataContainer(nullptr) {}

    /** Copy constructor, optional CopyOp object can be used to control
      * shallow vs deep copying of dynamic data.*/
    Object(const Object&);

    /** Clone the type of an object, with Object* return type.
        Must be defined by derived classes.*/
    virtual Object* cloneType() const = 0;

    /** Clone an object, with Object* return type.
        Must be defined by derived classes.*/
    virtual Object* clone() const = 0;

    virtual bool isSameKindAs(const Object*) const { return true; }


    /** return the name of the object's library. Must be defined
        by derived classes. The OpenSceneGraph convention is that the
        namespace of a library is the same as the library name.*/
    virtual const char* libraryName() const = 0;

    /** return the name of the object's class type. Must be defined
        by derived classes.*/
    virtual const char* className() const = 0;

    /** return the compound class name that combines the library name and class name.*/
    std::string getCompoundClassName() const { return std::string(libraryName()) + std::string("::") + std::string(className()); }

    /** Set the name of object using C++ style string.*/
    virtual void setName( const std::string& name ) { _name = name; }

    /** Set the name of object using a C style string.*/
    inline void setName( const char* name )
    {
        if (name) setName(std::string(name));
        else setName(std::string());
    }

    /** Get the name of object.*/
    inline const std::string& getName() const { return _name; }

    /** set the UserDataContainer object.*/
    void setUserDataContainer(UserDataContainer* udc);

    template<class T> void setUserDataContainer(const ref_ptr<T>& udc) { setUserDataContainer(udc.get()); }

    /** get the UserDataContainer attached to this object.*/
    UserDataContainer* getUserDataContainer() { return _userDataContainer; }

    /** get the const UserDataContainer attached to this object.*/
    const UserDataContainer* getUserDataContainer() const { return _userDataContainer; }

    /** Convenience method that returns the UserDataContainer, and if one doesn't already exist creates and assigns
     * a DefaultUserDataContainer to the Object and then return this new UserDataContainer.*/
    UserDataContainer* getOrCreateUserDataContainer();


    /**
     * Set user data, data must be subclassed from Referenced to allow
     * automatic memory handling.  If your own data isn't directly
     * subclassed from Referenced then create an adapter object
     * which points to your own object and handles the memory addressing.
     */
    virtual void setUserData(Referenced* obj);

    template<class T> void setUserData(const ref_ptr<T>& ud) { setUserData(ud.get()); }

    /** Get user data.*/
    virtual Referenced* getUserData();

    /** Get const user data.*/
    virtual const Referenced* getUserData() const;



    /** Convenience method that casts the named UserObject to TemplateValueObject<T> and gets the value.
      * To use this template method you need to include the osg/ValueObject header.*/
    template<typename T>
    bool getUserValue(const std::string& name, T& value) const;

    /** Convenience method that creates the TemplateValueObject<T> to store the
      * specified value and adds it as a named UserObject.
      * To use this template method you need to include the osg/ValueObject header. */
    template<typename T>
    void setUserValue(const std::string& name, const T& value);

protected:

    /** Object destructor. Note, is protected so that Objects cannot
        be deleted other than by being dereferenced and the reference
        count being zero (see Referenced), preventing the deletion
        of nodes which are still in use. This also means that
        Nodes cannot be created on stack i.e Node node will not compile,
        forcing all nodes to be created on the heap i.e Node* node
        = new Node().*/
    virtual ~Object();

    std::string _name;

    UserDataContainer* _userDataContainer;

private:

    /** disallow any copy operator.*/
    Object& operator = (const Object&) { return *this; }
};


} // namespace details
} // namespace sgi

