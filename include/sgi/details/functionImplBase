// kate: mode C++;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include <sgi/plugins/SGIItemBase.h>
#include <sgi/plugins/SGIPluginInterface.h>
#include <sgi/details/static_type_name>
#include <sgi/details/type_list>
#include <sgi/details/caster>
#include <sgi/Export>

#include <typeindex>
#include <unordered_map>


namespace sgi {
class SGIPluginHostInterface;
class IHostCallback;

namespace details {

template<bool value_>
struct constexpr_bool {
#ifdef __GNUG__
    constexpr static const bool value = value_;
#else
    static const bool value = value_;
#endif
};
typedef constexpr_bool<true> constexpr_true;
typedef constexpr_bool<false> constexpr_false;

template<typename T>
struct TypeWrap {
    typedef T Type;
};

template<typename EnumType, EnumType value_>
struct constexpr_enum {
#ifdef __GNUG__
    constexpr static const EnumType value = value_;
#else
    static const EnumType value = value_;
#endif
};

template<unsigned num>
struct UintWrap {
    typedef unsigned Type;
#ifdef __GNUG__
    constexpr static const unsigned value = num;
#else
    static const unsigned value = num;
#endif
};

template<typename CallParamType, typename ResultType>
class call_by_type_interface
{
public:
    virtual bool callImpl(const CallParamType & param, ResultType & result) = 0;
};

template<typename TypePolicy>
class call_by_type_registryT
{
protected:
    call_by_type_registryT() {}
public:
    typedef typename TypePolicy::CallParamType CallParamType;
    typedef typename TypePolicy::ResultType ResultType;
    typedef call_by_type_interface<CallParamType, ResultType> InterfaceType;
public:
    bool call(const std::type_info & ti, const CallParamType & param, ResultType & result)
    {
        bool ret;
        InterfaceType * typeImpl = _registed_types[std::type_index(ti)];
        ret = (typeImpl != nullptr);
        if(ret)
            ret = typeImpl->callImpl(param, result);
        return ret;
    }

    void registerType(const std::type_index & ti, InterfaceType* impl)
    {
        _registed_types[ti] = impl;
    }

    static call_by_type_registryT * instance()
    {
        static call_by_type_registryT s_instance;
        return &s_instance;
    }

private:
    typedef std::unordered_map<std::type_index, InterfaceType*> TypeMap;
    TypeMap _registed_types;
};

template<typename CallImplT, typename T>
class call_by_type_auto_registerT
{
public:
    typedef typename CallImplT::Registry RegistryType;
    typedef typename RegistryType::CallParamType CallParamType;
    typedef typename RegistryType::ResultType ResultType;

    typedef call_by_type_interface<CallParamType, ResultType> InterfaceType;

    class InterfaceWrapper : public InterfaceType
    {
    public:
        virtual bool callImpl(const CallParamType & param, ResultType & result)
        {
            return CallImplT::callImpl(TypeWrap<T>(), param, result);
        }
    };
    call_by_type_auto_registerT()
    {
        RegistryType::instance()->registerType(typeid(T), &_iface);
    }
private:
    InterfaceWrapper _iface;
};

template<typename IdPolicy>
class call_by_id_registryT
{
protected:
    call_by_id_registryT() {}
public:
    typedef typename IdPolicy::CallParamType CallParamType;
    typedef typename IdPolicy::ResultType ResultType;
    typedef call_by_type_interface<CallParamType, ResultType> InterfaceType;
public:
    bool call(const unsigned id, const CallParamType & param, ResultType & result)
    {
        bool ret;
        InterfaceType * typeImpl = _registed_types[id];
        ret = (typeImpl != nullptr);
        if(ret)
            ret = typeImpl->callImpl(param, result);
        return ret;
    }

    void registerId(const unsigned id, InterfaceType* impl)
    {
        _registed_types[id] = impl;
    }

    static call_by_id_registryT * instance()
    {
        static call_by_id_registryT s_instance;
        return &s_instance;
    }

private:
    typedef std::unordered_map<unsigned, InterfaceType*> TypeMap;
    TypeMap _registed_types;
};

template<typename CallImplT, unsigned Id>
class call_by_id_auto_registerT
{
public:
    typedef typename CallImplT::Registry RegistryType;
    typedef typename RegistryType::CallParamType CallParamType;
    typedef typename RegistryType::ResultType ResultType;

    typedef call_by_type_interface<CallParamType, ResultType> InterfaceType;

    class InterfaceWrapper : public InterfaceType
    {
    public:
        virtual bool callImpl(const CallParamType & param, ResultType & result)
        {
            return CallImplT::callImpl(UintWrap<Id>(), param, result);
        }
    };
    call_by_id_auto_registerT()
    {
        RegistryType::instance()->registerId(Id, &_iface);
    }
private:
    InterfaceWrapper _iface;
};

class SGI_IMPL_EXPORT functionImplBase
{
public:
    functionImplBase(SGIPluginHostInterface * hostInterface, SGIItemBase * item=nullptr);
    functionImplBase(SGIPluginHostInterface * hostInterface, const SGIItemBase * item=nullptr);
    virtual ~functionImplBase();

    template<typename ANOTHER_ITEMTYPE>
    ANOTHER_ITEMTYPE * item()
    {
        return static_cast<ANOTHER_ITEMTYPE *>(_item.get());
    }
    template<typename ANOTHER_ITEMTYPE>
    const ANOTHER_ITEMTYPE * item() const
    {
        return static_cast<const ANOTHER_ITEMTYPE *>(_item.get());
    }
    template<typename ANOTHER_ITEMTYPE>
    ANOTHER_ITEMTYPE * itemAs()
    {
        return dynamic_cast<ANOTHER_ITEMTYPE *>(_item.get());
    }
    template<typename ANOTHER_ITEMTYPE>
    const ANOTHER_ITEMTYPE * itemAs() const
    {
        return dynamic_cast<const ANOTHER_ITEMTYPE *>(_item.get());
    }

    template<typename ANOTHER_ITEMTYPE, typename SGIITEMTYPE_ENUM>
    ANOTHER_ITEMTYPE * cloneItem(SGIITEMTYPE_ENUM newType=static_cast<SGIITEMTYPE_ENUM>(0))
    {
        return _item->rootBase()->clone<ANOTHER_ITEMTYPE>(static_cast<SGIItemType>(newType));
    }
    template<typename ANOTHER_ITEMTYPE, typename SGIITEMTYPE_ENUM>
    ANOTHER_ITEMTYPE * cloneItem(SGIITEMTYPE_ENUM newType, details::Referenced * userData)
    {
        return _item->rootBase()->clone<ANOTHER_ITEMTYPE>(static_cast<SGIItemType>(newType), userData);
    }
    template<typename ANOTHER_ITEMTYPE, typename SGIITEMTYPE_ENUM>
    ANOTHER_ITEMTYPE * cloneItem(SGIITEMTYPE_ENUM newType, unsigned number)
    {
        return _item->rootBase()->clone<ANOTHER_ITEMTYPE>(static_cast<SGIItemType>(newType), number);
    }
    template<typename ANOTHER_ITEMTYPE, typename SGIITEMTYPE_ENUM>
    ANOTHER_ITEMTYPE * cloneItem(SGIITEMTYPE_ENUM newType, unsigned number, details::Referenced * userData)
    {
        return _item->rootBase()->clone<ANOTHER_ITEMTYPE>(static_cast<SGIItemType>(newType), number, userData);
    }

    template<typename ItemTypeFirst, typename ItemTypeSecond, typename SGIITEMTYPE_ENUM>
    SGIItemBase * cloneItemMulti(SGIITEMTYPE_ENUM newType=static_cast<SGIITEMTYPE_ENUM>(0))
    {
        SGIItemBase * ret = nullptr;
        if(ItemTypeFirst * first = dynamic_cast<ItemTypeFirst*>(_item.get()))
            ret = _item->rootBase()->clone<ItemTypeFirst>(static_cast<SGIItemType>(newType));
        else if(ItemTypeSecond * second = dynamic_cast<ItemTypeSecond*>(_item.get()))
            ret = _item->rootBase()->clone<ItemTypeSecond>(static_cast<SGIItemType>(newType));
        return ret;
    }
    template<typename ItemTypeFirst, typename ItemTypeSecond, typename SGIITEMTYPE_ENUM>
    SGIItemBase * cloneItemMulti(SGIITEMTYPE_ENUM newType, unsigned number)
    {
        SGIItemBase * ret = nullptr;
        if(ItemTypeFirst * first = dynamic_cast<ItemTypeFirst*>(_item.get()))
            ret = _item->rootBase()->clone<ItemTypeFirst>(static_cast<SGIItemType>(newType), number);
        else if(ItemTypeSecond * second = dynamic_cast<ItemTypeSecond*>(_item.get()))
            ret = _item->rootBase()->clone<ItemTypeSecond>(static_cast<SGIItemType>(newType), number);
        return ret;
    }
    template<typename ItemTypeFirst, typename ItemTypeSecond, typename SGIITEMTYPE_ENUM>
    SGIItemBase * cloneItemMulti(SGIITEMTYPE_ENUM newType, unsigned number, details::Referenced * userData)
    {
        SGIItemBase * ret = nullptr;
        if(ItemTypeFirst * first = dynamic_cast<ItemTypeFirst*>(_item.get()))
            ret = _item->rootBase()->clone<ItemTypeFirst>(static_cast<SGIItemType>(newType), number, userData);
        else if(ItemTypeSecond * second = dynamic_cast<ItemTypeSecond*>(_item.get()))
            ret = _item->rootBase()->clone<ItemTypeSecond>(static_cast<SGIItemType>(newType), number, userData);
        return ret;
    }

    template<typename T, typename ItemType>
    inline T * getObject()
    {
        return getObject<T, ItemType, StaticCaster>();
    }
    template<typename T, typename ItemType >
    inline const T * getObject() const
    {
        return getObject<T, ItemType, StaticCaster>();
    }
    template<typename T, typename ItemType, typename CasterT>
    T * getObject()
    {
        typedef typename ItemType::ObjectType ObjectType;
        ObjectType * obj = static_cast<const ItemType*>(_item.get())->object();
        T * ret = CasterT::template cast<T, ObjectType>(obj);
        return ret;
    }
    template<typename T, typename ItemType, typename CasterT>
    const T * getObject() const
    {
        typedef typename ItemType::ObjectType ObjectType;
        const ObjectType * obj = static_cast<const ItemType*>(_item.get())->object();
        const T * ret = CasterT::template cast<const T, const ObjectType>(obj);
        return ret;
    }
    template<typename T, typename ItemTypeFirst, typename ItemTypeSecond>
    inline T * getObjectMulti()
    {
        return getObjectMulti<T, ItemTypeFirst, ItemTypeSecond, StaticCaster>();
    }
    template<typename T, typename ItemTypeFirst, typename ItemTypeSecond>
    inline const T * getObjectMulti() const
    {
        return getObjectMulti<T, ItemTypeFirst, ItemTypeSecond, StaticCaster>();
    }
    template<typename T, typename ItemTypeFirst, typename ItemTypeSecond, typename CasterT>
    T * getObjectMulti()
    {
        T * ret = nullptr;
        if(ItemTypeFirst * first = dynamic_cast<ItemTypeFirst*>(_item.get()))
        {
            typedef typename ItemTypeFirst::ObjectType ObjectType;
            ObjectType * obj = first->object();
            ret = CasterT::template cast<T, ObjectType>(obj);
        }
        else if(ItemTypeSecond * second = dynamic_cast<ItemTypeSecond*>(_item.get()))
        {
            typedef typename ItemTypeSecond::ObjectType ObjectType;
            ObjectType * obj = second->object();
            ret = CasterT::template cast<T, ObjectType>(obj);
        }
        return ret;
    }
    template<typename T, typename ItemTypeFirst, typename ItemTypeSecond, typename CasterT>
    const T * getObjectMulti() const
    {
        const T * ret = nullptr;
        if(const ItemTypeFirst * first = dynamic_cast<const ItemTypeFirst*>(_item.get()))
        {
            typedef typename ItemTypeFirst::ObjectType ObjectType;
            const ObjectType * obj = first->object();
            ret = CasterT::template cast<const T, const ObjectType>(obj);
        }
        else if(const ItemTypeSecond * second = dynamic_cast<const ItemTypeSecond*>(_item.get()))
        {
            typedef typename ItemTypeSecond::ObjectType ObjectType;
            const ObjectType * obj = second->object();
            ret = CasterT::template cast<const T, const ObjectType>(obj);
        }
        return ret;
    }

    template<typename T>
    std::string enumValueToString(T value)
    {
        std::string ret;
        const std::string& value_type = details::StaticTypeName<T>::name();
        namedEnumValueToString(value_type, ret, static_cast<int>(value));
        return ret;
    }

    template<typename T, typename INPUT_TYPE>
    std::string castToEnumValueString(INPUT_TYPE value)
    {
        std::string ret;
        const std::string& value_type = details::StaticTypeName<T>::name();
        namedEnumValueToString(value_type, ret, static_cast<int>(value));
        return ret;
    }

    IHostCallback * hostCallback() const;
    SGIItemType itemType() const;
    unsigned itemNumber() const;

private:
    void namedEnumValueToString(const std::string& value_type, std::string& ret, int value);

protected:
    SGIPluginHostInterface * _hostInterface;
    SGIItemBasePtr _item;
};

#if 0
template<typename CallParamType, typename ResultType, typename SGIItemType=SGIItemBase>
class functionImplBaseT : public functionImplBase
{
public:
    functionImplBaseT(SGIPluginHostInterface * hostInterface, SGIItemType * item=nullptr)
        : functionImplBase(hostInterface, item)
        {
        }

public:
    class Registry
    {
    public:
        static bool call(SGIPluginHostInterface * hostInterface, ResultType & result, CallParamType param, SGIItemType * item)
        {
            bool ret;
            const std::type_info * ti = item->typeInfo();
            Registry * typeImpl = _registed_types[std::type_index(*ti)];
            ret = (typeImpl != nullptr);
            if(ret)
                result = typeImpl->callImpl(hostInterface, param, item);
            return ret;
        }

    protected:
        virtual ResultType callImpl(SGIPluginHostInterface * hostInterface, CallParamType param, SGIItemType * item) = 0;

        static void registerType(const std::type_index & ti, Registry * impl)
        {
            _registed_types[ti] = impl;
        }

        typedef std::unordered_map<std::type_index, Registry *> TypeMap;
        static TypeMap _registed_types;
    };

protected:
    template<typename T, template<typename> class ImplT>
    class AutoRegister : public Registry {
    public:
        AutoRegister() {
            Registry::registerType(typeid(T), this);
        }
        virtual ResultType callImpl(SGIPluginHostInterface * hostInterface, CallParamType param, SGIItemType * item) {
            ImplT<T> impl(hostInterface, item);
            ResultType ret = impl.process(param);
            return ret;
        }
    };
};
#endif

} // namespace details

template<typename T>
std::string enumValueToString(T value)
{
    std::string ret;
    const std::string& value_type = details::StaticTypeName<T>::name();
    SGIPluginInterface::hostInterface()->namedEnumValueToString(value_type, ret, (int)value);
    return ret;
}

template<typename T, typename INPUT_TYPE>
std::string castToEnumValueString(INPUT_TYPE value)
{
    std::string ret;
    const std::string& value_type = details::StaticTypeName<T>::name();
    SGIPluginInterface::hostInterface()->namedEnumValueToString(value_type, ret, (int)value);
    return ret;
}

} // namespace sgi
