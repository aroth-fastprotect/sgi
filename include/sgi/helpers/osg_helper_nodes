// kate: syntax C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once

#include <sgi/Export>
#include <osg/Geometry>
#include <osg/Version>
#if OSG_VERSION_LESS_THAN(3,4,0)
#include <osg/Geode>
#endif
#include <osg/Texture2D>
#include <functional>

namespace sgi {
namespace osg_helpers {

inline void tagNodeForObjectTree(osg::Node * node, const std::string & name=std::string())
{
    node->setUserValue("sgi_tree_item", true);
    if(!name.empty())
        node->setUserValue("sgi_tree_itemname", name);
}

inline osg::Node* createNodeForImage(osg::Image* image,float s,float t)
{
    osg::Node* ret = nullptr;
    if (image && s>0 && t>0)
    {
        osg::Geometry* geom = nullptr;
        float y = 1.0;
        float x = y*(s/t);

        float texcoord_y_b = (image->getOrigin() == osg::Image::BOTTOM_LEFT) ? 0.0f : 1.0f;
        float texcoord_y_t = (image->getOrigin() == osg::Image::BOTTOM_LEFT) ? 1.0f : 0.0f;

        // set up the texture.

        osg::Texture2D* texture = new osg::Texture2D;
        texture->setFilter(osg::Texture::MIN_FILTER,osg::Texture::LINEAR);
        texture->setFilter(osg::Texture::MAG_FILTER,osg::Texture::LINEAR);
        texture->setResizeNonPowerOfTwoHint(false);
        float texcoord_x = 1.0f;

        texture->setImage(image);

        // set up the drawstate.
        osg::StateSet* dstate = new osg::StateSet;
        dstate->setMode(GL_CULL_FACE,osg::StateAttribute::OFF);
        dstate->setMode(GL_LIGHTING,osg::StateAttribute::OFF);
        dstate->setTextureAttributeAndModes(0, texture, osg::StateAttribute::ON);
        if (image->isImageTranslucent())
        {
            dstate->setMode(GL_BLEND, osg::StateAttribute::ON);
            dstate->setRenderingHint(osg::StateSet::TRANSPARENT_BIN);
        }

        geom = new osg::Geometry;
        geom->setStateSet(dstate);

        osg::Vec3Array* coords = new osg::Vec3Array(6);
        (*coords)[0].set(-x,0.0f,y);
        (*coords)[1].set(-x,0.0f,-y);
        (*coords)[2].set(x,0.0f,-y);
        (*coords)[3].set(x,0.0f,-y);
        (*coords)[4].set(x,0.0f,y);
        (*coords)[5].set(-x,0.0f,y);
        geom->setVertexArray(coords);

        osg::Vec2Array* tcoords = new osg::Vec2Array(6);
        (*tcoords)[0].set(0.0f*texcoord_x,texcoord_y_t);
        (*tcoords)[1].set(0.0f*texcoord_x,texcoord_y_b);
        (*tcoords)[2].set(1.0f*texcoord_x,texcoord_y_b);
        (*tcoords)[3].set(1.0f*texcoord_x,texcoord_y_b);
        (*tcoords)[4].set(1.0f*texcoord_x,texcoord_y_t);
        (*tcoords)[5].set(0.0f*texcoord_x,texcoord_y_t);
        geom->setTexCoordArray(0,tcoords);

        osg::Vec4Array* colours = new osg::Vec4Array(1);
        (*colours)[0].set(1.0f,1.0f,1.0,1.0f);
        geom->setColorArray(colours, osg::Array::BIND_OVERALL);

        geom->addPrimitiveSet(new osg::DrawArrays(osg::PrimitiveSet::TRIANGLES,0,6));
        geom->setUseVertexArrayObject(true);
        geom->setUseVertexBufferObjects(true);
        geom->setUseDisplayList(false);
#if OSG_VERSION_GREATER_OR_EQUAL(3,4,0)
        ret = geom;
#else
        ret = new osg::Geode;
        ret->addDrawable(geom);
#endif
        ret->setUserValue("sgi_tree_imagegeode", true);
        ret->setName("ImageGeode");
    }
    return ret;
}
inline osg::Node * createNodeForImage(osg::Image* image)
{
    return createNodeForImage(image,image->s(),image->t());
}

inline osg::Geometry * createQuadGeometry(float w,float h)
{
    osg::Geometry * geom = new osg::Geometry;
    osg::Vec3Array* coords = new osg::Vec3Array(6);
    (*coords)[0].set(-w, 0.0f, h);
    (*coords)[1].set(-w, 0.0f, -h);
    (*coords)[2].set(w, 0.0f, -h);
    (*coords)[3].set(-w, 0.0f, h);
    (*coords)[4].set(w, 0.0f, -h);
    (*coords)[5].set(w, 0.0f, h);
    geom->setVertexArray(coords);

    float texcoord_y_b = 0.0f;
    float texcoord_y_t = 1.0f;
    float texcoord_x = 1.0f;

    osg::Vec2Array* tcoords = new osg::Vec2Array(6);
    (*tcoords)[0].set(0.0f*texcoord_x, texcoord_y_t);
    (*tcoords)[1].set(0.0f*texcoord_x, texcoord_y_b);
    (*tcoords)[2].set(1.0f*texcoord_x, texcoord_y_b);
    (*tcoords)[3].set(0.0f*texcoord_x, texcoord_y_t);
    (*tcoords)[4].set(1.0f*texcoord_x, texcoord_y_b);
    (*tcoords)[5].set(1.0f*texcoord_x, texcoord_y_t);
    geom->setTexCoordArray(0, tcoords);

    osg::Vec4Array* colours = new osg::Vec4Array(1);
    (*colours)[0].set(1.0f, 0.0f, 0.0, 1.0f);
    geom->setColorArray(colours, osg::Array::BIND_OVERALL);

    geom->addPrimitiveSet(new osg::DrawArrays(osg::PrimitiveSet::TRIANGLES, 0, 6));

    return geom;
}

inline osg::Geometry * createTriangleGeometry(float s)
{
    osg::Geometry * geom = new osg::Geometry;
    osg::Vec3Array* coords = new osg::Vec3Array(3);
    (*coords)[0].set(-(s/0.5f), 0.0f, 0.0f);
    (*coords)[1].set(+(s/0.5f), 0.0f, 0.0f);
    (*coords)[2].set(     0.0f, 0.0f, s);
    geom->setVertexArray(coords);

    osg::Vec4Array* colours = new osg::Vec4Array(3);
    (*colours)[0].set(1.0f, 0.0f, 0.0f, 1.0f);
    (*colours)[1].set(0.0f, 1.0f, 0.0f, 1.0f);
    (*colours)[2].set(0.0f, 0.0f, 1.0f, 1.0f);
    geom->setColorArray(colours, osg::Array::BIND_PER_VERTEX);

    geom->addPrimitiveSet(new osg::DrawArrays(osg::PrimitiveSet::TRIANGLES, 0, 3));

    return geom;
}

inline osg::Geometry * createBoxGeometry(float w,float h, float d)
{
    osg::Geometry * geom = new osg::Geometry;
    osg::Vec3Array* coords = new osg::Vec3Array(8);
    // front
    (*coords)[0].set(-w, -d,  h);
    (*coords)[1].set( w, -d,  h);
    (*coords)[2].set( w,  d,  h);
    (*coords)[3].set(-w,  d,  h);
    // back
    (*coords)[4].set(-w, -d, -h);
    (*coords)[5].set( w, -d, -h);
    (*coords)[6].set( w,  d, -h);
    (*coords)[7].set(-w,  d, -h);
    geom->setVertexArray(coords);

    float texcoord_y_b = 0.0f;
    float texcoord_y_t = 1.0f;
    float texcoord_x = 1.0f;

    osg::Vec2Array* tcoords = new osg::Vec2Array(8);
    (*tcoords)[0].set(0.0f*texcoord_x, texcoord_y_t);
    (*tcoords)[1].set(0.0f*texcoord_x, texcoord_y_b);
    (*tcoords)[2].set(1.0f*texcoord_x, texcoord_y_b);
    (*tcoords)[3].set(0.0f*texcoord_x, texcoord_y_t);
    (*tcoords)[4].set(1.0f*texcoord_x, texcoord_y_b);
    (*tcoords)[5].set(1.0f*texcoord_x, texcoord_y_t);
    (*tcoords)[6].set(1.0f*texcoord_x, texcoord_y_t);
    (*tcoords)[7].set(1.0f*texcoord_x, texcoord_y_t);
    geom->setTexCoordArray(0, tcoords);

    osg::Vec4Array* colours = new osg::Vec4Array(8);
    (*colours)[0].set(1.0f, 0.0f, 0.0f, 1.0f);
    (*colours)[1].set(0.0f, 1.0f, 0.0f, 1.0f);
    (*colours)[2].set(0.0f, 0.0f, 1.0f, 1.0f);
    (*colours)[3].set(1.0f, 1.0f, 0.0f, 1.0f);
    (*colours)[4].set(0.0f, 1.0f, 1.0f, 1.0f);
    (*colours)[5].set(1.0f, 0.0f, 1.0f, 1.0f);
    (*colours)[6].set(0.5f, 0.0f, 0.0f, 1.0f);
    (*colours)[7].set(0.0f, 0.5f, 0.0f, 1.0f);
    geom->setColorArray(colours, osg::Array::BIND_PER_VERTEX);

    GLubyte cube_elements[] = {
        // front
        0, 1, 2,
        2, 3, 0,
        // right
        1, 5, 6,
        6, 2, 1,
        // back
        7, 6, 5,
        5, 4, 7,
        // left
        4, 0, 3,
        3, 7, 4,
        // bottom
        4, 5, 1,
        1, 0, 4,
        // top
        3, 2, 6,
        6, 7, 3
    };
    osg::DrawElementsUByte * elements = new osg::DrawElementsUByte(osg::PrimitiveSet::TRIANGLES, sizeof(cube_elements)/sizeof(cube_elements[0]), cube_elements);

    geom->addPrimitiveSet(elements);

    return geom;
}

inline osg::Geometry * createImageBoxGeometry(float w, float h, float d, osg::Image* image)
{
    osg::Geometry * ret = createBoxGeometry(w, h, d);
    // set up the texture.

    osg::Texture2D* texture = new osg::Texture2D;
    texture->setFilter(osg::Texture::MIN_FILTER, osg::Texture::LINEAR);
    texture->setFilter(osg::Texture::MAG_FILTER, osg::Texture::LINEAR);
    texture->setResizeNonPowerOfTwoHint(false);
    float texcoord_x = 1.0f;

    texture->setImage(image);

    // set up the drawstate.
    osg::StateSet* dstate = new osg::StateSet;
    dstate->setMode(GL_CULL_FACE, osg::StateAttribute::OFF);
    dstate->setMode(GL_LIGHTING, osg::StateAttribute::OFF);
    dstate->setTextureAttributeAndModes(0, texture, osg::StateAttribute::ON);
    if (image->isImageTranslucent())
    {
        dstate->setMode(GL_BLEND, osg::StateAttribute::ON);
        dstate->setRenderingHint(osg::StateSet::TRANSPARENT_BIN);
    }
    ret->setStateSet(dstate);
    return ret;
}

class SGI_OSG_HELPER_EXPORT FindTreeItemNodeVisitor : public osg::NodeVisitor
{
public:
    FindTreeItemNodeVisitor(TraversalMode tm = TRAVERSE_ALL_CHILDREN)
        : osg::NodeVisitor(tm) {}
    struct SGI_OSG_HELPER_EXPORT NodeItem
    {
        osg::ref_ptr<osg::Node> node;
        std::string name;
        bool imageGeode;
        bool heightField;

        osg::Texture * getImageGeodeTexture() const;
        osg::Image * getImage() const;
        osg::HeightField * getHeightField() const;
    };
    typedef std::vector<NodeItem> NodeList;
    const NodeList &   results() const
    {
        return _nodes;
    }

    void apply(osg::Node& node) override;
protected:
    NodeList _nodes;
};

namespace run_operation_impl {
    template<typename CALLABLE, typename OBJECT_TYPE>
    class ObjectUpdateCallbackT : public osg::Callback
    {
        osg::ref_ptr<osg::Callback> _oldCallback;
        CALLABLE _op;
    public:
        ObjectUpdateCallbackT(OBJECT_TYPE * object, const CALLABLE & op)
            : osg::Callback()
            , _op(op)
        {
            // remember the old callback (if any)
            _oldCallback = object->getUpdateCallback();
            // ... and replace it with this one
            object->setUpdateCallback(this);
        }

        bool run(osg::Object* object, osg::Object * data) override
        {
            // first let the old update callback know that something happened
            if(_oldCallback.valid())
                _oldCallback->run(object, data);

            _op();

            // note, callback is responsible for scene graph traversal so
            // they must call traverse(node,nv) to ensure that the
            // scene graph subtree (and associated callbacks) are traversed.
            bool ret = osg::Callback::run(object, data);

            osg::ref_ptr<osg::Callback> myself = this;
            static_cast<osg::Node*>(object)->setUpdateCallback(_oldCallback.get());
            _oldCallback = nullptr;
            return ret;
        }
    };
} // namespace details


template<typename CALLABLE, class OBJECT_TYPE>
inline void runOperationInUpdateCallback(OBJECT_TYPE * object, const CALLABLE & op)
{
    new run_operation_impl::ObjectUpdateCallbackT<CALLABLE, OBJECT_TYPE>(object, op);
}
template<typename CALLABLE, class OBJECT_TYPE>
inline void runMethodInUpdateCallback(OBJECT_TYPE * object, const CALLABLE & op)
{
    runOperationInUpdateCallback(object, std::bind(op, object));
}
template<typename CALLABLE, class OBJECT_TYPE, typename ...Targs>
inline void runOperatorInUpdateCallback(OBJECT_TYPE * object, Targs... args)
{
    new run_operation_impl::ObjectUpdateCallbackT<CALLABLE, OBJECT_TYPE>(object, CALLABLE ( std::forward<Targs>(args)... ) );
}

template<typename VISITOR_TYPE, class OBJECT_TYPE, typename ...Targs>
inline void runVisitorInUpdateCallback(OBJECT_TYPE * object, Targs... args)
{
    struct CALLABLE {
        static void runVisitor(OBJECT_TYPE * object)
        {
            //VISITOR_TYPE v(std::forward<Targs>(args)...);
            VISITOR_TYPE v;
            object->accept(v);
        }
    };
    runOperationInUpdateCallback(object, std::bind(&CALLABLE::runVisitor, object) );
}


} // namespace osg_helpers
} // namespace sgi
