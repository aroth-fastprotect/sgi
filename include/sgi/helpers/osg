// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include <sstream>
#include <iomanip>

#include <osg/Vec4f>
#include <osg/Vec4d>
#include <osg/Vec3>
#include <osg/NodeVisitor>
#include <sgi/helpers/rtti>

#include <sgi/plugins/Matrix>
#include <sgi/plugins/Quat>
#include <sgi/plugins/SGIItemBase.h>


namespace osg {
    class Referenced;
    class Object;
    class Observer;
    class EllipsoidModel;
    class Quat;
    class Node;
    class Drawable;
    class ObserverNodePath;
    class Matrixf;
    class Matrixd;
    class Viewport;
    class Image;
	class HeightField;
    class Camera;
    class StateSet;
    class StateAttribute;
    class Image;
    class GraphicsContext;
    class Uniform;

    typedef std::vector< Node* > NodePath;

    template<typename VT>
    class BoundingBoxImpl;

    typedef BoundingBoxImpl<osg::Vec3f> BoundingBoxf;
    typedef BoundingBoxImpl<osg::Vec3d> BoundingBoxd;

#ifdef OSG_USE_FLOAT_BOUNDINGBOX
    typedef BoundingBoxf BoundingBox;
#else
    typedef BoundingBoxd BoundingBox;
#endif

    template<typename VT>
    class BoundingSphereImpl;

    typedef BoundingSphereImpl<osg::Vec3f> BoundingSpheref;
    typedef BoundingSphereImpl<osg::Vec3d> BoundingSphered;

#ifdef OSG_USE_FLOAT_BOUNDINGSPHERE
    typedef BoundingSpheref BoundingSphere;
#else
    typedef BoundingSphered BoundingSphere;
#endif
}
namespace osgViewer {
    class GraphicsWindow;
}

class QObject;
class QWidget;

namespace sgi {

class Image;
namespace osg_helpers {

/** Makes an HTML color ("#rrggbb" or "#rrggbbaa") from an OSG color. */
template<typename T>
inline std::string vec4fToHtmlColor( const T& c )
{
    std::stringstream buf;
    buf << "#";
    buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.r()*255.0f);
    buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.g()*255.0f);
    buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.b()*255.0f);
    if ( c.a() < 1.0f )
        buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.a()*255.0f);
    std::string ssStr;
    ssStr = buf.str();
    return ssStr;
}

// create an empty enum for the string representation of the
// osg::NodeMask (which is a typedef to unsigned int).
enum osgNodeMask { };
// extra type for GL enums
enum GLEnum { };

// extra type for GL modes values
enum GLModeValue { };
enum GLModeOverrideValue { };

SGI_OSG_HELPER_EXPORT std::string getObjectTypename(const osg::Referenced * object);
SGI_OSG_HELPER_EXPORT std::string getObjectTypename(const osg::Observer * object);
SGI_OSG_HELPER_EXPORT std::string getObjectTypename(const osg::Object * object);
SGI_OSG_HELPER_EXPORT std::string getObjectName(const osg::Referenced * object, bool includeAddr=true);
SGI_OSG_HELPER_EXPORT std::string getObjectName(const osg::Observer * object, bool includeAddr=true);
SGI_OSG_HELPER_EXPORT std::string getObjectName(const osg::Object * object, bool includeAddr=true);

SGI_OSG_HELPER_EXPORT std::string getObjectNameAndType(const osg::Referenced * object, bool includeAddr=true);
SGI_OSG_HELPER_EXPORT std::string getObjectNameAndType(const osg::Observer * object, bool includeAddr=true);
SGI_OSG_HELPER_EXPORT std::string getObjectNameAndType(const osg::Object * object, bool includeAddr=true);

inline sgi::Color osgColor(const osg::Vec4f & c)
{
    return sgi::Color(c.r(), c.g(), c.b(), c.a());
}

inline ::osg::Vec4f osgColor(const sgi::Color & c)
{
    return ::osg::Vec4f(c.r, c.g, c.b, c.a);
}

inline sgi::Matrix osgMatrix(const osg::Matrixd & m)
{
    return sgi::Matrix(m.ptr());
}

inline ::osg::Matrixd osgMatrix(const sgi::Matrix & m)
{
    return ::osg::Matrixd(m.ptr());
}

inline sgi::Quat osgQuat(const osg::Quat & q)
{
    return sgi::Quat(q.x(), q.y(), q.z(), q.w());
}

inline ::osg::Quat osgQuat(const sgi::Quat & q)
{
    return ::osg::Quat(q.x(), q.y(), q.z(), q.w());
}

SGI_OSG_HELPER_EXPORT std::string glValueName(unsigned n);
SGI_OSG_HELPER_EXPORT std::string glOverrideValueName(unsigned n);
SGI_OSG_HELPER_EXPORT std::string clearMaskToString(unsigned clearMask);
SGI_OSG_HELPER_EXPORT std::string cullingMaskToString(unsigned cullingMask);

SGI_OSG_HELPER_EXPORT const osg::EllipsoidModel & getDefaultEllipsoid();

SGI_OSG_HELPER_EXPORT osg::Vec3d fromECEFToXYZ(const osg::EllipsoidModel & ellipsoid, const osg::Vec3d & coord);
SGI_OSG_HELPER_EXPORT osg::Vec3d fromXYZToECEF(const osg::EllipsoidModel & ellipsoid, const osg::Vec3d & v);
SGI_OSG_HELPER_EXPORT osg::Vec3d fromECEFToXYZ(const osg::Vec3d & coord);
SGI_OSG_HELPER_EXPORT osg::Vec3d fromXYZToECEF(const osg::Vec3d & v);

SGI_OSG_HELPER_EXPORT void getHPRFromQuat(const osg::Quat& q, double &h, double &p, double &r);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec2f & v);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec3f & v);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec4f & v);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec2d & v);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec3d & v);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec4d & v);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Quat & q);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::NodePath & path, bool includeNodeMask = false);

SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::ObserverNodePath & path, bool includeNodeMask = false);

SGI_OSG_HELPER_EXPORT void writePrettyPositionHTML(std::basic_ostream<char>& os, const osg::Vec3 & v, const osg::Node * refNode=nullptr);
SGI_OSG_HELPER_EXPORT void writePrettyPositionHTML(std::basic_ostream<char>& os, const osg::Vec3 & v, const osg::Drawable * refDrawable=nullptr);
SGI_OSG_HELPER_EXPORT void writePrettyRotationHTML(std::basic_ostream<char>& os, const osg::Quat & q);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingSphere & bs, const osg::Node * refNode=nullptr);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingSphere * bs, const osg::Node * refNode=nullptr);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingBox & bb, const osg::Node * refNode);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingBox & bb, const osg::Drawable * refDrawable);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingBox * bb, const osg::Drawable * refDrawable);

enum MatrixUsageType
{
    MatrixUsageTypeGeneric = 0,
    MatrixUsageTypeModelView,
    MatrixUsageTypePerspective,
    MatrixUsageTypeLookAt,
    MatrixUsageTypeFrustum,
    MatrixUsageTypeOrtho,
    MatrixUsageTypeWindow,
};

SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Matrixd & mat, MatrixUsageType type, const osg::Node * refNode=nullptr);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Matrixd & mat, MatrixUsageType type, const osg::Drawable * refDrawable);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::RefMatrixd * mat, MatrixUsageType type, const osg::Node * refNode = nullptr);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::RefMatrixd * mat, MatrixUsageType type, const osg::Drawable * refDrawable);
SGI_OSG_HELPER_EXPORT void writePrettyHTML(std::basic_ostream<char>& os, const osg::Viewport * vp);

SGI_OSG_HELPER_EXPORT std::basic_ostream<char>& operator<<(std::basic_ostream<char>& output, const osg::BoundingBoxf & b);
SGI_OSG_HELPER_EXPORT std::basic_ostream<char>& operator<<(std::basic_ostream<char>& output, const osg::BoundingBoxd & b);
SGI_OSG_HELPER_EXPORT std::basic_ostream<char>& operator<<(std::basic_ostream<char>& output, const osg::BoundingSpheref & b);
SGI_OSG_HELPER_EXPORT std::basic_ostream<char>& operator<<(std::basic_ostream<char>& output, const osg::BoundingSphered & b);

SGI_OSG_HELPER_EXPORT const sgi::Image * convertImage(const osg::Image * image);
SGI_OSG_HELPER_EXPORT const sgi::Image * convertImage(const osg::HeightField * hf);

SGI_OSG_HELPER_EXPORT void heightFieldDumpHTML(std::basic_ostream<char>& os, const osg::HeightField * hf);
SGI_OSG_HELPER_EXPORT void heightFieldDumpPlainText(std::basic_ostream<char>& os, const osg::HeightField * hf);

SGI_OSG_HELPER_EXPORT std::string uniformToString(const osg::Uniform * uniform, bool * ok=nullptr);
SGI_OSG_HELPER_EXPORT std::string uniformToHTML(const osg::Uniform * uniform, bool * ok = nullptr);
SGI_OSG_HELPER_EXPORT bool stringToUniform(const std::string & s, osg::Uniform * uniform);

    /**
     * Visitor that locates a node by its type
     */
    template<typename T>
    class FindTopMostNodeOfTypeVisitor : public osg::NodeVisitor
    {
    public:
        FindTopMostNodeOfTypeVisitor():
          osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN),
              _foundNode(0)
          {}

          void apply(osg::Node& node)
          {
              T* result = dynamic_cast<T*>(&node);
              if (result)
              {
                  _foundNode = result;
              }
              else
              {
                  traverse(node);
              }
          }
          T* excludedNode() const { return _excludedNode; }
          void setExcludedNode(T * node) { _excludedNode = node; }

          T* _foundNode;
          T* _excludedNode;
    };

    /**
     * Collects all the nodes of type "T"
     */
    template<typename T>
    struct FindNodesVisitor : public osg::NodeVisitor
    {
        FindNodesVisitor() : osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN) { }

        void apply(osg::Node& node)
        {
            T* result = dynamic_cast<T*>( &node );
            if ( result )
                _results.push_back( result );
            traverse(node);
        }

        std::vector<T*> _results;
    };

    /**
     * Searchs the scene graph downward starting at [node] and returns the first node found
     * that matches the template parameter type.
     */
    template<typename T>
    T* findTopMostNodeOfType(osg::Node* node, unsigned traversalMask =~0u, T * excludedNode=nullptr)
    {
        if (!node) return 0;

        FindTopMostNodeOfTypeVisitor<T> fnotv;
        fnotv.setTraversalMode(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN);
        fnotv.setTraversalMask(traversalMask);
        fnotv.setExcludedNode(excludedNode);
        node->accept(fnotv);

        return fnotv._foundNode;
    }

    /**
     * Searchs the scene graph upward starting at [node] and returns the first node found
     * that matches the template parameter type.
     */
    template<typename T>
    T* findFirstParentOfType(osg::Node* node, unsigned traversalMask =~0u, T * excludedNode=nullptr)
    {
        if (!node) return 0;

        FindTopMostNodeOfTypeVisitor<T> fnotv;
        fnotv.setTraversalMode(osg::NodeVisitor::TRAVERSE_PARENTS);
        fnotv.setTraversalMask(traversalMask);
        fnotv.setExcludedNode(excludedNode);
        node->accept(fnotv);

        return fnotv._foundNode;
    }

    /**
     * Searchs the scene graph starting at [node] and returns the first node found
     * that matches the template parameter type. First searched upward, then downward.
     */
    template<typename T>
    T* findRelativeNodeOfType(osg::Node* node, unsigned traversalMask =~0u, T * excludedNode=nullptr)
    {
        if ( !node ) return 0;
        T* result = findFirstParentOfType<T>( node, traversalMask, excludedNode );
        if ( !result )
            result = findTopMostNodeOfType<T>( node, traversalMask, excludedNode );
        return result;
    }

    /**
     * Collects all the nodes of type "T" and given name
     */
    template<typename T>
    struct FindNamedNodesVisitor : public osg::NodeVisitor
    {
        FindNamedNodesVisitor(const std::string& name)
            : osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN)
            , _name(name) {}

        void apply(osg::Node& node)
        {
            T* result = dynamic_cast<T*>( &node );
            if ( result )
            {
                if (node.getName()==_name)
                    _results.push_back( result );
            }
            traverse(node);
        }
        const std::string & _name;
        std::vector<T*> _results;
    };
    /**
     * Collects all the nodes of type "T" and given name
     */
    template<typename T>
    struct FindTopMostNamedNodesVisitor : public osg::NodeVisitor
    {
        FindTopMostNamedNodesVisitor(const std::string& name)
            : osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN)
            , _name(name), _foundNode(nullptr) {}

        void apply(osg::Node& node)
        {
            T* result = dynamic_cast<T*>( &node );
            if ( result )
            {
                if (node.getName()==_name)
                {
                    _foundNode = result;
                }
            }
            if(!_foundNode)
                traverse(node);
        }
        const std::string & _name;
        T* _foundNode;
    };
   /**
     * Searchs the scene graph downward starting at [node] and returns the first node found
     * that matches the template parameter type.
     */
    template<typename T>
    T* findTopMostNodeByName(osg::Node* node, const std::string & name, unsigned traversalMask =~0u)
    {
        if (!node) return 0;

        FindTopMostNamedNodesVisitor<T> fnnv(name);
        fnnv.setTraversalMode(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN);
        fnnv.setTraversalMask(traversalMask);
        node->accept(fnnv);

        return fnnv._foundNode;
    }

    /**
     * Searchs the scene graph upward starting at [node] and returns the first node found
     * that matches the template parameter type.
     */
    template<typename T>
    T* findFirstParentByName(osg::Node* node, const std::string & name, unsigned traversalMask =~0u)
    {
        if (!node) return 0;

        FindTopMostNamedNodesVisitor<T> fnnv(name);
        fnnv.setTraversalMode(osg::NodeVisitor::TRAVERSE_PARENTS);
        fnnv.setTraversalMask(traversalMask);
        node->accept(fnnv);

        return fnnv._foundNode;
    }

    /**
     * Searchs the scene graph starting at [node] and returns the first node found
     * that matches the template parameter type. First searched upward, then downward.
     */
    template<typename T>
    T* findRelativeNodeByName(osg::Node* node, const std::string & name, unsigned traversalMask =~0u)
    {
        if ( !node ) return 0;
        T* result = findFirstParentByName<T>( node, name, traversalMask );
        if ( !result )
            result = findTopMostNodeByName<T>( node, name, traversalMask );
        return result;
    }

    SGI_OSG_HELPER_EXPORT osg::Camera * findCamera(const osg::Node * node);
    SGI_OSG_HELPER_EXPORT osg::Camera * findCamera(const osg::StateSet * stateset);
    SGI_OSG_HELPER_EXPORT osg::Camera * findCamera(const osg::StateAttribute * sa);

    SGI_OSG_HELPER_EXPORT unsigned findContextID(const osg::Camera * camera);
    SGI_OSG_HELPER_EXPORT unsigned findContextID(const osg::Node * node);
    SGI_OSG_HELPER_EXPORT unsigned findContextID(const osg::StateSet * stateset);
    SGI_OSG_HELPER_EXPORT unsigned findContextID(const osg::StateAttribute * sa);

    SGI_OSG_HELPER_EXPORT osg::StateSet* buildEffectiveStateSet(const osg::NodePath & path, osg::StateSet* top=nullptr);
    typedef std::vector<osg::ref_ptr<osg::StateSet>> StateSetList;
    SGI_OSG_HELPER_EXPORT bool collectStateSetList(const osg::NodePath & path, StateSetList & list);
    typedef std::pair<osg::ref_ptr<osg::Uniform>, osg::StateAttribute::OverrideValue>  RefUniformPair;
    typedef std::map<std::string, RefUniformPair> UniformList;
    SGI_OSG_HELPER_EXPORT bool collectUniformList(const osg::NodePath & path, UniformList & list);
    SGI_OSG_HELPER_EXPORT bool collectUniformList(const osg::StateSet * stateSet, UniformList & list);

#if !defined(BUILD_SGI_VIEWER_BASE)
    SGI_OSG_HELPER_EXPORT 
#endif
    QWidget * getWidgetForGraphicsWindow(osgViewer::GraphicsWindow * gw, QWidget * parent = nullptr);

#if !defined(BUILD_SGI_VIEWER_BASE)
    SGI_OSG_HELPER_EXPORT
#endif
    bool createWidgetForGraphicsWindow(osg::GraphicsContext * ctx, QObject * parent = nullptr);

    SGI_OSG_HELPER_EXPORT osg::Geometry * createGeometryForImage(osg::Image* image,float s,float t);
    SGI_OSG_HELPER_EXPORT osg::Geometry * createGeometryForImage(osg::Image* image);
    SGI_OSG_HELPER_EXPORT osg::Geometry * createGeometryForTexture(osg::Texture* texture);

    } // namespace osg_helpers
} // namespace sgi
