// kate: syntax C++11;
// SGI - Copyright (C) 2012-2017 FAST Protect, Andreas Roth

#pragma once
#include <sgi/Export>
#include <osg/Version>
#include <osgUtil/Statistics>

namespace osgText {
    class TextBase;
}

namespace sgi {

namespace osg_helpers {

class SGI_OSG_HELPER_EXPORT MemoryStatisticsVisitor : public osg::NodeVisitor
{
public:
    MemoryStatisticsVisitor(unsigned int contextID=~0u, TraversalMode tm=TRAVERSE_NONE);
    ~MemoryStatisticsVisitor();

    struct SGI_OSG_HELPER_EXPORT Numbers {
        Numbers();
        void clear();
        unsigned totalSize;
        unsigned textureMemorySize;
        unsigned primitivesMemorySize;
    };
    const Numbers & numbers() const { return _numbers; }
    const unsigned & totalSize() const { return _numbers.totalSize; }
    const unsigned & textureMemorySize() const { return _numbers.textureMemorySize; }
    const unsigned & primitivesMemorySize() const { return _numbers.primitivesMemorySize; }

    virtual void apply(osg::Node& node);
    virtual void apply(osg::Drawable& node);
    virtual void apply(osg::StateSet& ss);
    virtual void apply(osg::Uniform& uniform);
    virtual void apply(osg::StateAttribute& attr);

    virtual void apply(osg::BufferData& buffer);
    virtual void apply(osg::Texture::TextureObject & to);

protected:
    unsigned int _contextID;
    Numbers _numbers;
};

class SGI_OSG_HELPER_EXPORT StatisticsVisitor : public osgUtil::StatsVisitor
{
public:
    typedef std::set<osg::StateAttribute*> StateAttributeSet;
    typedef std::set<osg::Uniform*> UniformSet;

public:
    StatisticsVisitor(unsigned int contextID = ~0u);
    virtual ~StatisticsVisitor();

    void ignoreKnownPagedLODs(bool enable=true);
    void ignoreKnownProxyNodes(bool enable=true);

    virtual void reset();
    virtual void apply(osg::Node& node);
    virtual void apply(osg::Group& node);
    virtual void apply(osg::Transform& node);
    virtual void apply(osg::LOD& node);
    virtual void apply(osg::Switch& node);
    virtual void apply(osg::Geode& node);
    virtual void apply(osg::Drawable& drawable);

    virtual void apply(osg::PagedLOD& node);
    virtual void apply(osg::ProxyNode& node);
    virtual void apply(osg::CoordinateSystemNode& node);
    virtual void apply(osg::Camera& node);
    virtual void apply(osg::CameraView& node);
    virtual void apply(osg::MatrixTransform& node);
    virtual void apply(osg::PositionAttitudeTransform& node);

    virtual void apply(osg::StateSet& ss);

    virtual void apply(osg::StateAttribute & attr);
    virtual void apply(osg::Uniform & uniform);
    virtual void apply(osg::BufferData& buffer);
    virtual void apply(osg::Texture::TextureObject & to);

    virtual void apply(osgText::TextBase & text);

    virtual void totalUpStats();

public:
    void printHTML(std::ostream& out);
    void printStateSetsHTML(std::ostream& out);
    void getMemoryInfo(MemoryStatisticsVisitor::Numbers & unique, MemoryStatisticsVisitor::Numbers & instanced);

    unsigned getNumberOfStateSets() const;
    osg::ref_ptr<osg::StateSet> getStateSet(unsigned index) const;

protected:
    virtual void            updateNodeStats(osg::Node & node);
#if OSG_VERSION_GREATER_THAN(3,3,1)
    virtual void            updateCallbackStats(osg::Callback * cb);
#else
    virtual void            updateCallbackStats(osg::NodeCallback * cb);
#endif

    void computeMemoryUsage();

protected:
    unsigned int _contextID;
    unsigned int _numInstancedPagedLOD;
    unsigned int _numInstancedProxyNode;
    unsigned int _numInstancedCSN;
    unsigned int _numInstancedCamera;
    unsigned int _numInstancedCameraView;
    unsigned int _numInstancedMatrixTransform;
    unsigned int _numInstancedPAT;
    unsigned int _numInstancedSceneGraphNode;
    unsigned int _numEventCallbacks;
    unsigned int _numUpdateCallbacks;
    unsigned int _numCullCallbacks;
    unsigned int _numCullInactive;
    unsigned int _numCullDisabled;
    unsigned int _numAnimationCallbacks;
    unsigned int _numInstancedStateAttribute;
    unsigned int _numInstancedUniform;
    unsigned int _numInstancedAnimationSkeleton;
    unsigned int _numInstancedAnimationBone;
    unsigned int _numInstancedTextBase;
    unsigned int _numDeprecatedDataGeometries;
    unsigned int _numInstancedVBODrawables;
    unsigned int _numInstancedDisplayListDrawables;

    enum { MaxStateAttributeType = osg::StateAttribute::FRAME_BUFFER_OBJECT };

    unsigned int _numInstancedSA[MaxStateAttributeType + 1];

    bool _ignoreKnownPagedLODs;
    bool _ignoreKnownProxyNodes;

    NodeSet             _pagedlodSet;
    NodeSet             _proxynodeSet;
    NodeSet             _csnSet;
    NodeSet             _cameraSet;
    NodeSet             _cameraViewSet;
    NodeSet             _matrixTransformSet;
    NodeSet             _patSet;
    StateAttributeSet   _stateAttributeSets[MaxStateAttributeType + 1];
    UniformSet          _uniformSet;
    NodeSet             _animationSkeletonSet;
    NodeSet             _animationBoneSet;
    NodeSet             _textBaseSet;
    NodeSet             _vboDrawableSet;
    NodeSet             _displayListDrawableSet;

    MemoryStatisticsVisitor * _uniqueMemory;
    MemoryStatisticsVisitor * _instancedMemory;
};
    } // namespace osg_helpers
} // namespace sgi
