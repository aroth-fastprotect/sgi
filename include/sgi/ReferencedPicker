// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#ifdef SGI_USE_OSGEARTH
#include <osgEarth/Version>
#if OSGEARTH_VERSION_LESS_THAN(2,7,0)
#include <osgEarth/Pickers>
#else
#include <osgEarth/IntersectionPicker>
#endif
#else
#include <osgGA/GUIEventAdapter>
#endif // SGI_USE_OSGEARTH
#include <osgUtil/LineSegmentIntersector>
#include <sgi/Export>

namespace osgViewer {
    class View;
    class GraphicsWindow;
}

namespace sgi {

class SGI_OSG_HELPER_EXPORT ReferencedPickerBase : public osg::Referenced
{
public:
    ReferencedPickerBase(const osg::Vec2f & pos, osgViewer::View * view, osg::Node * root, unsigned traversalMask=~0u);
    ReferencedPickerBase(osgViewer::GraphicsWindow * gw, osg::Node * root=nullptr, unsigned traversalMask=~0u);
    ReferencedPickerBase(const osgGA::GUIEventAdapter & ea, osg::Node * root=nullptr, unsigned traversalMask=~0u);
    /** dtor */
    virtual ~ReferencedPickerBase();

    bool                        result() const { return m_result; }
    const osg::Vec2f &          position() const { return m_pos; }
    osgViewer::View *           view() { return m_view; }
    osg::Node *                 root() { return m_root; }
    unsigned                    traversalMask() const { return m_traversalMask; }

    virtual void                recalc() = 0;

protected:
    osg::Vec2f                              m_pos;
    bool                                    m_result;
    osg::ref_ptr<osgViewer::View>           m_view;
    osg::ref_ptr<osg::Node>                 m_root;
    unsigned                                m_traversalMask;
};

typedef osg::ref_ptr<ReferencedPickerBase> ReferencedPickerBasePtr;

#ifdef SGI_USE_OSGEARTH
class SGI_OSG_HELPER_EXPORT ReferencedPicker : public ReferencedPickerBase
{
public:
#if OSGEARTH_VERSION_LESS_THAN(2,7,0)
	typedef osgEarth::Picker PickerType;
    typedef PickerType::Intersection  Hit;
    typedef PickerType::Intersections Hits;
#else
	typedef osgEarth::IntersectionPicker PickerType;
    typedef osgEarth::PrimitiveIntersector::Intersection Hit;
    typedef osgEarth::PrimitiveIntersector::Intersections Hits;
#endif
    ReferencedPicker(const osg::Vec2f & pos, osgViewer::View * view, osg::Node * root=nullptr, unsigned traversalMask=~0u, float hitBufferSize=1.0f, PickerType::Limit limit=PickerType::NO_LIMIT);
    ReferencedPicker(osgViewer::GraphicsWindow * gw, osg::Node * root=nullptr, unsigned traversalMask=~0u, float hitBufferSize=1.0f, PickerType::Limit limit= PickerType::NO_LIMIT);
    ReferencedPicker(const osgGA::GUIEventAdapter & ea, osg::Node * root=nullptr, unsigned traversalMask=~0u, float hitBufferSize=1.0f, PickerType::Limit limit= PickerType::NO_LIMIT);

    /** dtor */
    virtual ~ReferencedPicker();


    const Hits & hits() const { return m_hits; }
    float                       thickness() const { return m_thickness; }
    void                        setThickness(float value) { m_thickness = value; }
    PickerType::Limit           limit() const { return m_limit; }

    void                recalc() override;

private:
    PickerType *          m_picker;
    float                       m_thickness;
    Hits                        m_hits;
    PickerType::Limit     m_limit;
};
#endif // SGI_USE_OSGEARTH

class SGI_OSG_HELPER_EXPORT ReferencedLinePicker : public ReferencedPickerBase
{
public:
    ReferencedLinePicker(const osg::Vec2f & pos, osgViewer::View * view, osg::Node * root=nullptr, unsigned traversalMask=~0u);
    ReferencedLinePicker(osgViewer::GraphicsWindow * gw, osg::Node * root=nullptr, unsigned traversalMask=~0u);
    ReferencedLinePicker(const osgGA::GUIEventAdapter & ea, osg::Node * root=nullptr, unsigned traversalMask=~0u);

    /** dtor */
    virtual ~ReferencedLinePicker();

    typedef osgUtil::LineSegmentIntersector::Intersection  Hit;
    typedef osgUtil::LineSegmentIntersector::Intersections Hits;

    void recalc() override;

    const Hits & hits() const;

private:
    osg::ref_ptr<osgUtil::LineSegmentIntersector> m_picker;
};

} // namespace sgi
