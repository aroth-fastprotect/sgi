// kate: syntax C++;
// SGI - Copyright (C) 2012-2020 FAST Protect, Andreas Roth

#pragma once

#include <sgi/plugins/SGIHostItemOsgEarth.h>
#include <osgEarth/Version>
#include <osgEarth/Config>
#include <osgEarth/TileKey>
#include <sgi/plugins/SGIItemOsg>

namespace osgEarth {
    class ElevationPool;
#if OSGEARTH_VERSION_GREATER_OR_EQUAL(3,0,0)
    namespace Util {
        class ElevationQuery;
    }
    namespace Contrib {
        class TileSource;
    }
    class TileLayer;
    typedef Contrib::TileSource TileSource;
#else
    class ElevationQuery;
    class TileSource;
    class TerrainLayer;
#endif
    class TileKey;
    class CacheBin;
#if OSGEARTH_VERSION_LESS_THAN(3,0,0)
    namespace Symbology {
        class Style;
        class StyleSelector;
    }
#else
    class Style;
    class StyleSelector;
#endif
} // namespace osgEarth

namespace sgi {
namespace support {
    class SGIHostItemOsgEarthConfig;
    class SGIHostItemOsgEarthConfigOptions;
}

enum SGIItemType_osgearth
{
    SGIItemType_plugin_osgearth = SGIItemTypePluginBaseOsgEarth,
    SGIItemTypeLayers,
    SGIItemTypeImageLayers,
    SGIItemTypeElevationLayers,
    SGIItemTypeModelLayers,
    SGIItemTypeMaskLayers,
    SGIItemTypeImageLayer,
    SGIItemTypeElevationLayer,
    SGIItemTypeModelLayer,
    SGIItemTypeMaskLayer,
    SGIItemTypeMap,
    SGIItemTypeMapNode,
    SGIItemTypeVirtualProgramShaderMap,
    SGIItemTypeVirtualProgramFunctions,
    SGIItemTypeVirtualProgramEffectiveProgram,
    SGIItemTypeVirtualProgramCache,
    SGIItemTypeOptions,
    SGIItemTypeDataExtents,
    SGIItemTypeConfig,
    SGIItemTypeTileCache,
    SGIItemTypeTileCacheLRU,
    SGIItemTypeTileCacheMap,
    SGIItemTypeShaderComposerShaderMap,
    SGIItemTypeShaderComposerProgramFunctions,
	SGIItemTypeBlacklist,
	SGIItemTypeExtensions,
    SGIItemTypeCullData,
	SGIItemTypeDatabases,
    SGIItemTypeChangeset,
    SGIItemTypeInfo,
    SGIItemTypePreMergeOps,
    SGIItemTypePostMergeOps,
    SGIItemTypeProfiles,
    SGIItemTypeProgramSharedRepo,
    SGIItemTypePickerContext,
    SGIItemTypeGeoHeightfield,
    SGIItemTypeFeatureSourceFeatures,
    SGIItemTypeStyle,
    SGIItemTypeSelectors,
    SGIItemTypeResourceLibraries,
    SGIItemTypeLevels,
};

typedef SGIItemInfoPlainPtr<osgEarth::Config> SGIItemInfoOsgEarthConfig;
typedef SGIHostItemImpl<SGIItemInfoOsgEarthConfig> SGIHostItemOsgEarthConfig;
typedef SGIItemHolderT<SGIItemInfoOsgEarthConfig> SGIItemHolderOsgEarthConfig;
typedef SGIItemT<SGIHostItemOsgEarthConfig, SGIItemHolderOsgEarthConfig> SGIItemEarthConfig;

typedef SGIItemInfoPlainPtr<osgEarth::ConfigOptions> SGIItemInfoOsgEarthConfigOptions;
typedef SGIHostItemImpl<SGIItemInfoOsgEarthConfigOptions> SGIHostItemOsgEarthConfigOptions;
typedef SGIItemHolderT<SGIItemInfoOsgEarthConfigOptions> SGIItemHolderOsgEarthConfigOptions;
typedef SGIItemT<SGIHostItemOsgEarthConfigOptions, SGIItemHolderOsgEarthConfigOptions> SGIItemEarthConfigOptions;

#if OSGEARTH_VERSION_LESS_THAN(3,0,0)
typedef SGIItemInfoPlainPtr<osgEarth::Symbology::Style> SGIItemInfoOsgEarthStyle;
typedef SGIItemInfoPlainPtr<osgEarth::Symbology::StyleSelector> SGIItemInfoOsgEarthStyleSelector;
#else
typedef SGIItemInfoPlainPtr<osgEarth::Style> SGIItemInfoOsgEarthStyle;
typedef SGIItemInfoPlainPtr<osgEarth::StyleSelector> SGIItemInfoOsgEarthStyleSelector;
#endif

typedef SGIHostItemImpl<SGIItemInfoOsgEarthStyle> SGIHostItemOsgEarthStyle;
typedef SGIItemHolderT<SGIItemInfoOsgEarthStyle> SGIItemHolderOsgEarthStyle;
typedef SGIItemT<SGIHostItemOsgEarthStyle, SGIItemHolderOsgEarthStyle> SGIItemEarthStyle;

typedef SGIHostItemImpl<SGIItemInfoOsgEarthStyleSelector> SGIHostItemOsgEarthStyleSelector;
typedef SGIItemHolderT<SGIItemInfoOsgEarthStyleSelector> SGIItemHolderOsgEarthStyleSelector;
typedef SGIItemT<SGIHostItemOsgEarthStyleSelector, SGIItemHolderOsgEarthStyleSelector> SGIItemEarthStyleSelector;

namespace osgearth_plugin {

struct TileSourceTileKeyData
{
    enum Status {
        StatusNotLoaded = 0,
        StatusLoaded,
        StatusLoadFailure,
        StatusNoData
    };
    enum ObjectType {
        ObjectTypeGeneric = 0,
        ObjectTypeImage,
        ObjectTypeHeightField,
        ObjectTypeNode,
        ObjectTypeString
    };

    static ObjectType getObjectType(osgEarth::CacheBin * cb);
    static ObjectType getObjectType(osgEarth::TileSource * ts);
#if OSGEARTH_VERSION_GREATER_OR_EQUAL(3,0,0)
    static ObjectType getObjectType(osgEarth::TileLayer * tl);
#else
    static ObjectType getObjectType(osgEarth::TerrainLayer * tl);
#endif

    TileSourceTileKeyData(osgEarth::TileSource * ts, const osgEarth::TileKey & tk, osg::Referenced * td = nullptr);
#if OSGEARTH_VERSION_GREATER_OR_EQUAL(3,0,0)
    TileSourceTileKeyData(osgEarth::TileLayer * tl, const osgEarth::TileKey & tk, osg::Referenced * td = nullptr);
#else
    TileSourceTileKeyData(osgEarth::TerrainLayer * tl, const osgEarth::TileKey & tk, osg::Referenced * td = nullptr);
#endif
    TileSourceTileKeyData(osgEarth::CacheBin * cb, ObjectType type, const osgEarth::TileKey & tk, osg::Referenced * td = nullptr);

    osg::ref_ptr<osgEarth::TileSource> tileSource;

    osgEarth::DataExtentList findTileSourceDataExtents(const osgEarth::TileSource * tileSource, const osgEarth::TileKey & key);
#if OSGEARTH_VERSION_GREATER_OR_EQUAL(3,0,0)
    osg::ref_ptr<osgEarth::TileLayer> tileLayer;
#else
    osg::ref_ptr<osgEarth::TerrainLayer> terrainLayer;
#endif
    osg::ref_ptr<osgEarth::CacheBin> cacheBin;
    osgEarth::TileKey tileKey;
    osg::ref_ptr<osg::Referenced> tileData;
    Status status;
    ObjectType objectType;
};

class TileSourceInfo;

#if OSGEARTH_VERSION_GREATER_OR_EQUAL(3,0,0)
typedef details::ReferencedRawPtrT<osgEarth::Util::ElevationQuery, osg::Referenced> ElevationQueryReferenced;
#else
typedef details::ReferencedRawPtrT<osgEarth::ElevationQuery, osg::Referenced> ElevationQueryReferenced;
#endif
typedef details::ReferencedDataT<osgEarth::ElevationPool, osg::Referenced> ElevationPoolReferenced;
typedef details::ReferencedDataT<osgEarth::TileKey, osg::Referenced> TileKeyReferenced;
typedef details::ReferencedDataT<TileSourceTileKeyData, osg::Referenced> TileSourceTileKey;
} // namespace osgearth_plugin

} // namespace sgi
